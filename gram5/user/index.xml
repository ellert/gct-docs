<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../xinclude.mod" >
<!ENTITY prompt "<prompt>&#37; </prompt>" >
<!ENTITY globusrun "<command>globusrun</command>" >
<!ENTITY gjr "<command>globus-job-run</command>" >
<!ENTITY gjs "<command>globus-job-submit</command>" >
%xinclude;

]>
<book id="gram5User">
<title>GT <replaceable role="entity">version</replaceable> GRAM5: User's Guide</title>
<titleabbrev>User's Guide</titleabbrev>

<bookinfo><abstract>
<title>Introduction</title>
<para>
  GRAM services provide secure, remote job submission to different
  <glossterm baseform="Local Resource Manager">local resource
  managers</glossterm> in a Grid
  environment. This document describes the features of the GRAM service and
  an overview of tools to use the service.
</para>
</abstract></bookinfo>

<chapter id="gram5-user-overview"><title>GRAM5 Overview</title>
   <para>GRAM provides a uniform, remote interface for executing jobs on
   compute resources.  GRAM jobs consist of file transfers and program
   execution on one or more compute elements managed by a local resource
   manager. The GRAM client can submit the job and then later poll for its status, or
   it can request that the GRAM service notify it when the job changes state or
   completes. While the job is executing, the client may send control messages to the 
   GRAM service to monitor or modify the job.  GRAM provides reliable job
   submission, job recovery in case of service or client failures, file
   staging, and asynchronous notification messages. 
   </para>

   <para>
   GRAM achieves its uniform interface by implementing a domain-specific language
   called the <olink targetdoc="gram5Developer" targetptr="gram5-rsl">Resource
   Specification Language</olink> (RSL) which provides a simple way to express
   job requirements, environment, and commands in a specification which is
   independent of the local resource manager which will actually execute the
   job.
   </para>

   <para>
   The GRAM protocol is a two-phase protocol, so that when jobs are submitted
   to a GRAM service, they will not start until a client has received a contact
   handle to the job. The GRAM service will not clean up a job until it has
   received acknowledgment from the client that the job completion state has
   been received. In the case of transient errors, GRAM clients can reconnect
   to the GRAM service to determine job state, or to update information the job
   will need to stage output files.
   </para>

   <para>
   The GRAM service has been built to work in the presence of client and
   service failures without losing state information about jobs. If a client
   exits and is restarted, it can request job state information, update URLs
   for output files to be staged to, and register a new address to receive job
   state callbacks. If a service exits and is restarted, it will resume
   processing all existing GRAM jobs from their previous state, and
   continue to send state updates to any clients which are registered for
   them.
   </para>

   <para>
   GRAM provides file staging before and after a job runs, scratch directory
   management, and a cache location for common files. File staging is Grid-aware
   and access remote storage resources via the GridFTP, ftp https, http protocols.
   </para>

   <para>
   Because the GRAM service implements client callbacks for job state changes,
   clients can submit a number of jobs and be notified when each completes.
   This allows clients to be more responsive to changes in state than services
   which require polling for job completion.
   </para>


   <section id="gram5-user-client-tools"><title>GRAM Client Tools</title>
   <para>
   There are a number of GRAM clients which can be used to interact with the
   GRAM service.  The Globus Toolkit includes <command>globusrun</command>, 
   &gjs;, and &gjr;.
   Other projects provide higher-level tools which can be used to manage
   large sets of jobs.
   </para>

   <section><title>Condor-G</title>
   <para>Condor is a high-throughput job scheduler from the University of Wisconsin.
   It provides a facility called Condor-G to run jobs via GRAM. See the
   <ulink
   url="http://research.cs.wisc.edu/condor/manual/latest/index.html">Condor
   documentation</ulink>, especially the section on Grid Universe, which
   describes how to write Condor Classified Ads to run jobs using GRAM services.
   The <literal>gt5</literal> Grid type provides the best performance for using
   GRAM with Condor-G.
   </para>
   </section>

   <section><title>Swift</title>
   <para>The <ulink url="http://www.ci.uchicago.edu/swift/main/">Swift</ulink>
   system from the University of Chicago is a data-oriented
   coarse grained scripting language that supports dataset typing and mapping,
   dataset iteration, conditional branching, and procedural composition. The
   SwiftScript language can be used to create workflows that are executed on
   various services, including GRAM. See the <ulink
   url="http://www.ci.uchicago.edu/swift/guides/userguide.php">Swift User's
   Guide</ulink> for information about using Swift.
   </para>
   </section>

   <section><title>GridWay</title>
   <para>
    The <ulink url="http://www.gridway.org/">GridWay Metascheduler</ulink> enables
    large-scale, reliable and efficient sharing of computing resources: clusters,
    supercomputers, stand-alone servers. It supports different LRM systems (PBS,
    SGE, LSF, Condor) within a single organization or scattered across several
    administrative domains. The <ulink
    url="http://www.gridway.org/doku.php?id=documentation">GridWay</ulink> manual
    describes how to use GridWay.
   </para>
   </section>

   <section><title>GRAM APIs</title>
   <para>
   In addition to the tools above, you can write your own GRAM clients, using the 
   public APIs described in the <olink targetdoc="gram5Developer">GRAM5
   Developer's Guide</olink>. The client APIs there can be used to write custom
   applications that interact with GRAM services in C/C++ or Java.
   </para>
   </section>
   </section>

   <section><title>Portals and Science Gateways that use GRAM</title>

   <section><title>XSEDE</title>
   <para>
   <ulink url="https://www.xsede.org">XSEDE</ulink> provides a number of
   domain-specific
   <ulink url="https://www.xsede.org/gateways-overview">science gateways and
   portals</ulink>,
   which provide interfaces to various computation and data resources,
   including some managed by GRAM.</para>
   
   <para>These include <ulink
   url="http://www.cgd.ucar.edu/amp/">CGD's Atmospheric Modeling &amp;
   Predictability Section</ulink> from NCAR, the
   <ulink url="http://uslims.uthscsa.edu">UltraScan LIMS Portal</ulink> at the
   Bioinformatics Core Facility at the University of Texas Health Science
   Center at San Antonio, the <ulink
   url="https://sidgrid.ci.uchicago.edu">Social Informatics Data (SID) Grid</ulink>
   at the University of Chicago, and <ulink url="http://scec.org">Southern
   California Earthquake Center</ulink> headquarted at the University of
   Southern California.
   </para>
   </section>
</section>

</chapter>

<chapter id="gram5-user-usagescenarios"><title>Using GRAM5</title>
    
    <section id="gram5-user-prepare"><title>Before Getting Started</title>
      <indexterm type="gram5"><primary>jobs</primary><secondary>preparing</secondary><tertiary>generate valid proxy</tertiary></indexterm>
        <indexterm type="gram5-howto"><primary>jobs</primary><secondary>preparing</secondary><tertiary>generate valid proxy</tertiary></indexterm>
    <section><title>GRAM and Security</title>
    <para>
    GRAM uses the <olink targetdoc="gsic">Grid Security Infrastructure</olink>
    for its security implementation, based on X.509 certificates and the TLSv1
    protocol to authenticate user identities with GRAM services.  Before using
    GRAM, you must first obtain a security credential. This
    is typically done by requesting a certificate from a site-specific CA, or
    by using a portal to obtain a temporary credential. In typical use, GRAM
    uses a <ulink url="http://www.ietf.org/rfc/rfc3820.txt">proxy certificate</ulink>
    which is a short-term credential digitally signed by a private key. Please
    read the <olink targetdoc="gsicUser" targetptr="gsic-user-basic-procedure"></olink> to learn more about how to obtain and use a 
    GSI credential before continuing this guide.
    </para>
    </section>

    <section id="gram5-user-resource-names"><title>GRAM Resource Names</title>
    <para>
    Before interacting with a GRAM service, you must know its contact address.
    GRAM uses a very flexible URL-like syntax to contain information about the
    service's hostname, TCP port number, service name, and security identity.
    In the basic case, you will only need to use the service's hostname to 
    contact the service. However, if the service is configured to run on a 
    non-standard port, or with a custom service name, or credential which
    doesn't match its hostname, you will need to use one of the longer forms.
    </para>

    <para>
    A fully-qualified resource name looks something like
    <literal>grid.example.org:2120/jobmanager-sge:/C=US/O=Example/OU=Grid/CN=host/grid.example.org</literal>.
    Breaking this down, the resource name includes:

    <informaltable>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>Name Component</entry>
            <entry>Example</entry>
            <entry>Meaning</entry>
            <entry>Default</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><simpara>Host Name</simpara></entry>
            <entry><simpara><literal>grid.example.org</literal></simpara></entry>
            <entry><simpara>Host which the GRAM service is running on.</simpara></entry>
            <entry><simpara>None. This is always a required component.</simpara></entry>
          </row>
          <row>
            <entry><simpara>TCP Port</simpara></entry>
            <entry><simpara><literal>2120</literal></simpara></entry>
            <entry><simpara>TCP port which the GRAM service is listening on. If multiple GRAM services
            are running on the same machine, they may use alternate TCP ports.</simpara></entry>
            <entry><simpara><literal>2119</literal></simpara></entry>
          </row>
          <row>
            <entry><simpara>Service Name</simpara></entry>
            <entry><simpara><literal>jobmanager-sge</literal></simpara></entry>
            <entry><simpara>The name of the GRAM service on the given host. A
            host may provide access to multiple resources
            using different local resource managers.  This name is used to
            distinguish which service to use for a particular job request. Typically, a host
            will provide a default entry called <literal>jobmanager</literal> which will interface
            with a batch computing or high-throughput scheduling system, and another called
            <literal>jobmanager-fork</literal> for simple non-compute jobs.</simpara></entry>
            <entry><simpara><literal>jobmanager</literal></simpara></entry>
          </row>
          <row>
            <entry><simpara>Credential Name</simpara></entry>
            <entry><simpara><literal>/C=US/O=Example/OU=Grid /CN=host/grid.example.org</literal></simpara></entry>
            <entry><simpara>The name of the credential which the GRAM service is using. This is only
            needed if the credential's common name does not match the host name.</simpara></entry>
            <entry><simpara><literal>host@</literal><replaceable>hostname</replaceable></simpara></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    </para>
    <para>
    Any component of the resource name may be omitted, except for the host name, and defaults will be used.
    The field separator <literal>:</literal> must be retained when skipping between name components.
    </para>


    </section>
    </section>

    <section id="gram5-user-submitting-jobs">
        <title>Basic Client Interace</title>

        <para>This section contains the basic command-line interface for
        interacting with gram services. For these examples, we will use the 
        GRAM resource named <literal>grid.example.org:2119/jobmanager-pbs</literal>.
        You will need to change that to resources which you have been granted
        access. 
        </para>

        <section>
            <title>Batch and Interactive Use</title>
            <para>
            The tools &gjr; and
            &gjs; an both be used to submit jobs
            to GRAM resources. The difference is that
            &gjr; will wait until the job terminates
            before exiting and prints job standard output and stderr after the
            job completes, while &gjs; will
            submit the job and then exit immediately, printing the job contact
            to its standard output stream. The job can be then polled for status
            with the <command>globus-job-status</command> command, its output can
            be fetched with the <command>globus-job-get-output</command> and cleaned
            up with the <command>globus-job-clean</command> command.
            </para>
        </section>

        <section>
            <title>Running Basic Jobs with &gjr;</title>

            <para>
            The &gjr; provides a simple
            blocking command-line interface to the GRAM service. The
            &gjr; program submits a job to a GRAM
            resource and waits for the job to terminate. After the job
            terminates, the output and error streams of the job are sent to 
            the output and error streams of &gjr;. Note that truly interactive
            jobs are not supported with GRAM.
            </para>

            <para>
            The &gjr; program has command-line
            options to control most aspects of jobs run by GRAM. However,
            certain behaviors must be specified by definition of an RSL
            string containing various job attributes. A more detailed description
            about the RSL language is included on the section on running
            jobs with &globusrun; below.
            </para>

            <para>
            The following examples show some of the common command-line options
            to &gjr;. Full <olink targetdoc="gram5PI" targetptr="gram5-cmd-globus-job-run">&gjr; documentation</olink>
            is available in the <olink targetdoc="gram5PI">GRAM5 public interface guide</olink>.
            </para>

            <example>
                <title>Minimal job using globus-job-run</title>

                <para>
                The following command line submits a single instance of the 
                <filename>/bin/hostname</filename> executable to the resource
                named by
                <systemitem class="service">grid.example.org/jobmanager-pbs</systemitem>.

                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs /bin/hostname</option></command>
<computeroutput>node1.grid.example.org</computeroutput></screen>
                </para>
            </example>

            <example>
                <title>Multiprocess job using globus-job-run</title>

                <para>
                The following command line submits ten instances of an
                executable <filename>/bin/hostname</filename>. The output of
                the job is the name of the ten hosts that the job ran on. The
                <option>-np <replaceable>COUNT</replaceable></option> option
                causes &gjr; to run
                <replaceable>COUNT</replaceable> instances of the executable.

                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs -np 4 /bin/hostname</option></command>
<computeroutput>node1.grid.example.org
node3.grid.example.org
node2.grid.example.org
node10.grid.example.org</computeroutput></screen>
                </para>
            </example>

            <example>
                <title>Staging an executable file using globus-job-run</title>

                <para>
                The following command line submits an executable which is local to the
                submit machine to the GRAM resource, then executes it. The executable
                is removed automatically from the GRAM resource after the job completes.
                The <option>-s</option> option prior to the executable name causes
                &gjr; to stage the executable using GASS (an https-based protocol) from
                the machine running &gjr; to the GRAM resource.

                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs -s my-executable</option></command>
<computeroutput>node1.grid.example.org</computeroutput></screen>
                </para>
            </example>

            <example>
                <title>Providing an input file to a job using globus-job-run</title>

                <para>
                The following command line submits a job to a GRAM resource. When
                this job runs, its standard input will read from the file 
                <filename><replaceable>$HOME</replaceable>/inputfile.txt</filename>, 
                which is located on the GRAM resource. The <option>-stdin</option>
                command-line option indicates this path.
                
                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs -stdin inputfile.txt /bin/cat</option></command>
<computeroutput>Hello, Grid</computeroutput></screen>
                </para>
            </example>

            <example>
                <title>Staging an input file to a job using globus-job-run</title>

                <para>
                The following command line submits a job to a GRAM resource. When
                this job runs, its standard input will read from the file 
                <filename>inputfile.txt</filename>, 
                which is located on the submit client machine. The <option>-stdin -s</option>
                command-line option combination causes the input to be staged in the above
                executable staging example.
                
                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs -stdin -s inputfile.txt /bin/cat</option></command>
<computeroutput>Hello, staged input on the Grid</computeroutput></screen>
                </para>
            </example>

            <example>
                <title>Canceling an interactive job </title>

                <para>
                This example shows how using the
                <keycombo
                action="simul"><keycap>Control</keycap><keycap>C</keycap></keycombo>
                (or other system-specific mechanism for sending the
                <literal>SIGINT</literal> signal) can be used to cancel a GRAM
                job.
                </para>

                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs /bin/sleep 90</option></command>
<userinput><keycombo><keycap>Control</keycap><keycap>C</keycap></keycombo></userinput>
<computeroutput>GRAM Job failed because the user cancelled the job (error code 8)</computeroutput></screen>

            </example>

            <example>
                <title>Setting job environment variables with globus-job-run</title>

                <para>
                The following command line submits one instances of the
                executable <filename>/usr/bin/env</filename>, setting some
                environment variables in the job environment beyond those
                set by GRAM5.  The <option>-env <replaceable>VARIABLE</replaceable>=<replaceable>VALUE</replaceable></option>
                command-line option adds the named variable to the job
                environment. It may be present multiple times in the command-line
                to set multiple environment variables.

                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs -env TEST=1 -env GRID=1 /usr/bin/env</option></command>
<computeroutput>HOME=/home/juser
LOGNAME=juser
GLOBUS_GRAM_JOB_CONTACT=https://client.example.org:3882/16001579536700793196/5295612977485997184/
GLOBUS_LOCATION=/opt/globus-<replaceable role="entity">version</replaceable>
GLOBUS_GASS_CACHE_DEFAULT=/home/juser/.globus/.gass_cache
TEST=1
X509_USER_PROXY=/home/juser/.globus/job/mactop.local/16001579536700793196.5295612977485997184/x509_user_proxy
GRID=1</computeroutput></screen>
                </para>
            </example>
        </section>

        <section>
            <title>Submitting Basic Jobs with &gjs;</title>
            <para>A related tool to <command>globus-job-run</command> is
            <olink targetdoc="gram5PI"
            targetptr="gram5-cmd-globus-job-submit"><command>globus-job-submit</command></olink>.
            This command submits a job to a GRAM5 service then exits without
            waiting for the job to terminate. Other tools
            (<olink targetdoc="gram5PI" targetptr="gram5-cmd-globus-job-cancel"><command>globus-job-cancel</command></olink>,
            <olink targetdoc="gram5PI" targetptr="gram5-cmd-globus-job-clean"><command>globus-job-clean</command></olink>, and
            <olink targetdoc="gram5PI"
            targetptr="gram5-cmd-globus-job-get-output"><command>globus-job-get-output</command></olink>)
            allow futher interaction
            with the job.
            </para>

            <important>
            <para>
                When using <command>globus-job-submit</command>, the job output
                and state will remain on disk on the GRAM resource until one
                of <command>globus-job-clean</command> or
                <command>globus-job-cancel</command> is run for that job. Be
                sure to clean up your jobs!
            </para>
            </important>

            <para>
            The &gjs; program has most of the
            same command-line options as &gjr;. 
            When run, instead of displaying the output and error streams of
            the job, it prints the job contact, which is used with the other
            globus-job tools to interact with the job.
            </para>

            <example>
                <title>globus-job-submit</title>
                <para>
                This example shows the interaction of submitting a job via 
                <command>globus-job-submit</command>, checking its status
                with <command>globus-job-status</command>, getting its
                output with <command>globus-job-get-output</command>, and then
                cleaning the job with <command>globus-job-clean</command>. Note
                that this example uses the <literal>jobmanager-fork</literal>
                service when retrieving input and cleaning the job. This allows
                those tasks to be done without waiting in the batch system.
                Most sites will allow these sorts of administrative jobs to be
                run on the GRAM node, but consult your system administrator to
                be sure.
                </para>

                <para>Also, note, that the job contact returned from &gjs; can be
                used to get information about the job from any computer,  provided you
                have GRAM tools installed and your security environment set up.
                </para>

                <screen>&prompt;<command>globus-job-submit <option>grid.example.org/jobmanager-pbs /bin/hostname</option></command>
<computeroutput>https://grid.example.org:38843/16001600430615223386/5295612977486013582/</computeroutput>
&prompt;<command>globus-job-status <option>https://grid.example.org:38843/16001600430615223386/5295612977486013582/</option></command>
<computeroutput>PENDING</computeroutput>
&prompt;<command>globus-job-status <option>https://grid.example.org:38843/16001600430615223386/5295612977486013582/</option></command>
<computeroutput>ACTIVE</computeroutput>
&prompt;<command>globus-job-status <option>https://grid.example.org:38843/16001600430615223386/5295612977486013582/</option></command>
<computeroutput>DONE</computeroutput>
&prompt;<command>globus-job-get-output <option>-r grid.example.org/jobmanager-fork \
    https://grid.example.org:38843/16001600430615223386/5295612977486013582/</option></command>
<computeroutput>node1.grid.example.org</computeroutput>
&prompt;<command>globus-job-clean <option>-r grid.example.org/jobmanager-fork \
    https://grid.example.org:38843/16001600430615223386/5295612977486013582/</option></command>
<computeroutput>
    WARNING: Cleaning a job means:
        - Kill the job if it still running, and
        - Remove the cached output on the remote resource

    Are you sure you want to cleanup the job now (Y/N) ?
</computeroutput>
<userinput>y</userinput>
<computeroutput>
Cleanup successful.</computeroutput></screen>
            </example>

        </section>

        <section>
            <title>Advanced Jobs with globus-job-run</title>
            <example>
                <title>Using custom RSL clauses with globus-job-run</title>

                <para>
                The following command line submits an mpi job using
                <command>globus-job-run</command>, setting the
                <literal>jobtype</literal> RSL attribute to
                <literal>mpi</literal>. Any RSL attribute understood by the
                LRM can be added to a job via this method.
                </para>

                <screen>&prompt;<command>globus-job-run <option>grid.example.org/jobmanager-pbs -np 5 -x '&amp;(jobtype=mpi)' a.out</option></command>
<computeroutput>Hello, MPI (rank: 0, count: 5)
Hello, MPI (rank: 3, count: 5)
Hello, MPI (rank: 1, count: 5)
Hello, MPI (rank: 4, count: 5)
Hello, MPI (rank: 2, count: 5)</computeroutput>
                </screen>
            </example>

            <example>
                <title>Constructing RSL strings with globus-job-run</title>

                <para>
                The <command>globus-job-run</command> program can also generate
                the RSL language description of a job based on the command-line
                options given to it. This example combines some of the
                features above and prints out the resulting RSL. This RSL string
                can be passed to tools such as &globusrun; to
                be run later.
                </para>

                <screen>&prompt;<command>globus-job-run -dumprsl <option>grid.example.org/jobmanager-pbs -np 5 -x '&amp;(jobtype=mpi)' -env GRID=1 -env TEST=1 a.out</option></command>
<computeroutput> &amp;(jobtype=mpi)
    (executable="a.out")
    (environment= ("GRID" "1") ("TEST" "1"))
    (count=5)</computeroutput></screen>
            </example>

        </section>
    </section>

    <section id="gram5-user-globusrun">
        <title>Advanced GRAM Client with the globusrun tool</title>

            <para>The <olink targetdoc="gram5PI" targetptr="gram5-cmd-globusrun">&globusrun;</olink> tool provides a more
            flexible tool for submitting, monitoring, and canceling jobs. With
            this tool, most of the functionality of the GRAM5 APIs are made
            available from the command-line.
            </para>

            <para>
            One major difference between &globusrun; and the
            other tools described above is that &globusrun;
            uses the <olink targetdoc="gram5PI" targetptr="gram5-rsl">RSL
            language</olink> to provide the job description, instead of multiple
            command-line options to describe the various aspects of the job.
            The section on <command>globus-job-run</command> contained a brief
            example RSL in the <option>-dumprsl</option> example above.
            </para>

            <para>
            The following sections show examples of the different modes that
            &globusrun; can run in. Full information about
            &globusrun; command-line options is available
            in the public interface guide.
            </para>

            <section>
                <title>Checking RSL Syntax</title>
                <para>
                This example shows how to check that an RSL document contains
                a syntactically correct job description. Note that this mode
                does not do semantic validation of the RSL, so an RSL document
                that passes this test may not work when submitted to a GRAM5
                service.
                </para>

                <example>
                    <title>Checking RSL Syntax</title>
                <screen>&prompt;&globusrun; <option>-p "&amp;(executable=a.out)"</option>
<computeroutput>
RSL Parsed Successfully...
</computeroutput>
&prompt;&globusrun; <option>-p "&amp;/executable=a.out)"</option>
<computeroutput>
ERROR: cannot parse RSL &amp;/executable=/adfadf/adf /adf /adf)

Syntax: globusrun [-help] [-f RSL file] [-s][-b][-d][...] [-r RM] [RSL]


Use -help to display full usage</computeroutput></screen>
                </example>
            </section>

            <section>
                <title>Checking Service Contacts</title>
                <para>
                This example shows how to check that a
                <command>globus-gatekeeper</command> is running at a particular
                contact and that the client and service have mutually-trusted 
                credentials.
                </para>

                <example>
                <title>GRAM Authentication test</title>
                <screen>&prompt;&globusrun; <option>-a -r grid.example.org/jobmanager-pbs</option>
<computeroutput>GRAM Authentication test successful</computeroutput>
&prompt;&globusrun; <option>-a -r grid.example.org/jobmanager-lsf</option>
<computeroutput>GRAM Authentication test failure: the gatekeeper failed to find the requested service</computeroutput>
&prompt;&globusrun; <option>-a -r grid.example.org/jobmanager-pbs:host@not.example.org</option>
<computeroutput>GRAM Authentication test failure: an authorization operation failed
globus_xio_gsi: gss_init_sec_context failed.
GSS Major Status: Unexpected Gatekeeper or Service Name
globus_gsi_gssapi: Authorization denied: The name of the remote host
(host@not.example.org), and the expected name for the remote host
(grid.example.org) do not match. This happens when the name in the host
certificate does not match the information obtained from DNS and is often a DNS
configuration problem.</computeroutput>
                </screen>

                <para>
                    <note>
                    <para>
                    The DNS configuration problem was a common issue in GRAM2,
                    but GRAM5 will not depend on DNS to resolve names for
                    mutual authentication.
                    </para>
                    </note>
                </para>
            </example>
            </section>

            <section>
                <title>Checking GRAM service version</title>

                <para>
                This example shows how to determine what software version of 
                GRAM5 is deployed at a particular service contact.
                </para>

                <example>
                    <title>GRAM version check</title>
                <screen>&prompt;&globusrun; <option>-j -r grid.example.org/jobmanager-pbs:host@not.example.org</option>
<computeroutput>Toolkit version: 4.3.0-HEAD
Job Manager version: 10.5 (1256257907-0)</computeroutput>
                </screen>

                <para>
                    <note>
                    <para>
                        This example shows the version number for an unreleased
                        development version of GRAM5. The actual numbers
                        returned will be different.
                    </para>
                    </note>

                    <note>
                    <para>
                        This feature is new in GRAM5. When contacting a GRAM2
                        service, &globusrun; will display the following error
                        message:

                        <screen><computeroutput>GRAM version check failed : an incoming HTTP message did not contain the expected information</computeroutput></screen>
                    </para>
                    </note>
                </para>
                </example>
            </section>

            <section>
                <title>Basic Interactive job with globusrun</title>

                <para>
                This example shows how to submit interactive job with
                &globusrun;. When the <option>-s</option>
                is used, the output of the job command is returned to the
                client and displayed as if the command ran locally. This
                is similar to the behavior of the
                <command>globus-job-run</command> program described above.
                </para>

                <example>
                    <title>Basic Interactive Job</title>
                <screen>&prompt;&globusrun; <option>-s -r example.grid.org/jobmanager-pbs "&amp;(executable=/bin/hostname)(count=5)"</option>
<computeroutput>node03.grid.example.org
node01.grid.example.org
node02.grid.example.urg
node05.grid.example.org
node04.grid.example.org</computeroutput></screen>
                </example>
            </section>

            <section>
                <title>Basic batch job with globusrun</title>

                <para>
                This example shows how to submit, monitor, and cancel a batch
                job using &globusrun;. This method is useful
                for the case where the job may run for a long time, the job may
                be queued for a long time, or when there are network
                reliability issues between the client and service.
                </para>

                <example>
                    <title>Basic Batch Job</title>
                <screen>&prompt;&globusrun; <option>-b -r grid.example.org/jobmanager-pbs "&amp;(executable=/bin/sleep)(arguments=500)"</option>
<computeroutput>globus_gram_client_callback_allow successful
GRAM Job submission successful
https://grid.example.org:38824/16001608125017717261/5295612977486019989/
GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING</computeroutput>
&prompt;&globusrun; <option>-status https://grid.example.org:38824/16001608125017717261/5295612977486019989/</option>
<computeroutput>PENDING</computeroutput>
&prompt;&globusrun; <option>-k https://grid.example.org:38824/16001608125017717261/5295612977486019989/</option>
&prompt;</screen>
                </example>
            </section>

            <section>
                <title>Refreshing a GRAM5 Credential</title>
                <para>
                The following example shows how to refresh the credential used
                by a job manager and a job.
                </para>

                <example>
                    <title>Refreshing a Credential</title>
                    <screen>&prompt;&globusrun; <option>-refresh-proxy https://grid.example.org:38824/16001608125017717261/5295612977486019989/</option>
&prompt;<command>echo $?</command>
<computeroutput>0</computeroutput></screen> 
                    <para>
                        <note>
                            <para>
                            In GT <replaceable role="entity">version</replaceable>,
                            &globusrun; does not print any
                            diagnostics when given the
                            <option>-refresh-proxy</option> command-line option.
                            Therefore, check the exit code as above to ensure that
                            the refresh is successful.
                            </para>
                        </note>
                    </para>
                </example>
            </section>

            <section>
                <title>Dealing with credential expiration</title>

                <para>
                When the Job Manager's credential is about to expire, it sends
                a message to all clients registered for
                <literal>GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED</literal>
                notifications that the job manager is terminating and that the
                job will continue to run without the job manager.
                </para>

                <para>
                Any client which receives such a message can (if necessary)
                generate a new proxy as described above and then submit a
                <emphasis>restart request</emphasis> to start a job manager
                with a new credential. This job manager will resume monitoring
                the jobs which were started prior to proxy expiration.
                </para>

                <para>
                In this example, the &globusrun; displays an
                error message when the job manager's proxy is about to expire.
                The user creates a new proxy and resumes monitoring the job with
                &globusrun;.
                </para>

                <example>
                    <title>Proxy Expiration Example</title>
                    <screen>&prompt;&globusrun; <option>-r grid.example.org "&amp;(executable=a.out)"</option>
<computeroutput>globus_gram_client_callback_allow successful
GRAM Job submission successful
GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE
GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED
GRAM Job failed because the user proxy expired (job is still running) (error code 131)</computeroutput>
&prompt;<command>grid-proxy-init</command>
<computeroutput>Your identity: /DC=org/DC=example/OU=grid/CN=Joe User
Enter GRID pass phrase for this identity:
Creating proxy ........................................................................... Done
Your proxy is valid until: Tue Nov 10 04:25:03 2009</computeroutput>
&prompt;&globusrun; <option>-r grid.example.org "&amp;(restart="https://grid.example.org:1997/16001700477575114131/5295612977486005428/)"</option>
<computeroutput>globus_gram_client_callback_allow successful
GRAM Job submission successful
GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE
GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE</computeroutput></screen>
                </example>
            </section>

            <section>
                <title>File staging</title>

                <para>
                In addition to the standard output and error stream 
                output done by &globusrun;, GRAM5 can do basic file management
                tasks to stage files to the GRAM5 service node before
                submitting a job and to stage files from the GRAM5 service node
                to a file service after the job completes.
                </para>

                <para>
                GRAM5 file staging supports four URL schemes:
                <literal>ftp</literal>, <literal>gsiftp</literal>, 
                <literal>http</literal>, and <literal>https</literal>. Note,
                that for the <literal>https</literal> scheme, GRAM expects
                the file server to be running with the same identity as the
                client.
                </para>
                <para>
                General file staging is controlled by three RSL attributes:
                <literal>file_stage_in</literal>,
                <literal>file_stage_in_shared</literal>, and 
                <literal>file_stage_out</literal>. In addition, the files named
                by the RSL attributes <literal>executable</literal>,
                <literal>stdin</literal> may be staged in and the files named
                by the RSL attributes <literal>stdout</literal> and
                <literal>stderr</literal> may be staged out.
                </para>
                <para>
                The <literal>file_stage_in_shared</literal> RSL attribute
                instructs GRAM to store a local copy of the resource named by
                the URL in the GASS cache. This is useful if multiple
                concurrent jobs will be accessing one or more common files. The
                GASS cache will manage a reference count for files in the cache
                and remove them when all jobs that refer to them complete.
                </para>

                <para>
                The following example shows how to stage a few files from a 
                GridFTP server to the GRAM node. It uses the
                <literal>rsl_substitution</literal> mechanism to define a
                subsitution variable to reduce the amount of redundancy in the
                job description.
                </para>

                <example>
                    <title>File stage in</title>

                    <screen>&prompt;&globusrun; <option>-s -r grid.example.org/jobmanager-pbs \
    "&amp;(rsl_substitution = (GRIDFTP_SERVER gsiftp://gridftp.example.org)) \
      (executable=/bin/ls)
      (arguments=/tmp/staged_file)
      (file_stage_in = ($(GRIDFTP_SERVER)/staged_file /tmp/staged_file))"</option>
<computeroutput>/tmp/staged_file</computeroutput></screen>
                </example>

                <para>
                The next example uses the
                <literal>file_stage_in_shared</literal> RSL attribute to stage
                a file into the cache. The file is transferred from
                the client using the GASS https server embedded in the
                &globusrun; program when the <option>-s</option> option is
                used.
                </para>

                <example>
                    <title>File stage in shared</title>
                    <screen>&prompt;&globusrun; <option>-s -r grid.example.org/jobmanager-pbs \
    "&amp;(executable=/bin/ls) \
      (arguments = -l /tmp/staged_file_link1 /tmp/staged_file_link1) \
      (file_stage_in_shared = \
          (\$(GLOBUSRUN_GASS_URL)/staged_file1 /tmp/staged_file_link1))"</option>
<computeroutput>lrwxr-xr-x  1 juser   juser  120 Nov 11 20:37 /tmp/staged_file1 -> /home/juser/.globus/.gass_cache/local/md5/ff/771bded8a2c7dacc1a1c0fecafa0ce/md5/39/13ab3db7fc002ed54012083ae6ed1c/data</computeroutput></screen>
                </example>

                <para>
                The final staging example uses the
                <literal>file_stage_out</literal> RSL attribute to transfer
                a file from the GRAM service to an FTP server using anonymous
                FTP</para>

                <example>
                    <title>File stage out</title>

                    <screen>&prompt;&globusrun; <option>-r grid.example.org/jobmanager-pbs \
    "&amp;(executable=a.out) \
      (file_stage_out = (results.txt ftp://anonymous:nopass@ftp.example.org/incoming/results.txt))"</option>
&prompt;</screen>
                </example>

                <para>
                <note>
                <para>
                In all of the above cases, multiple files may be staged
                using any combination of the supported URL schemes.
                </para>
                </note>
                </para>
            </section>

            <section>
                <title>Temporary files and cleanup</title>
                <para>
                GRAM5 supports creating a per-job scratch directory which
                can be used as a place to store files that will be
                automatically removed by GRAM when the job completes. It also
                supports an explicit list of files to remove when the job
                completes.
                </para>

                <para>
                This example shows how to stage files into a scratch directory.
                It again uses the embedded GASS https server, stages to the
                GRAM service, then runs /bin/ls in the temporary directory.
                After the job completes, the contents of
                <literal>$(SCRATCH_DIRECTORY)</literal> and the directory
                itself are removed.
                </para>
                <example>
                    <title>Staging to scratch directory</title>
                    <screen>&prompt;&globusrun; <option>-s grid.example.org/jobmanager-pbs \
    "&amp;(scratch_dir = \$(HOME)) \
      (directory = \$(SCRATCH_DIRECTORY))
      (file_stage_in = \
          (\$(GLOBUSRUN_GASS_URL)/inputfile $(SCRATCH_DIRECTORY)/inputfile)) \
      (executable = /bin/ls)"</option>
<computeroutput>inputfile</computeroutput></screen>
                </example>

                <para>
                This example shows how to explicitly remove a file that was
                created by the job.
                </para>
                <example>
                    <title>Cleaning up a file</title>
                    <screen>&prompt;&globusrun; <option>-s grid.example.org/jobmanager-pbs \
    "&amp;(executable = /bin/touch) \
      (arguments = temporary_file) \
      (file_clean_up = temporary_file)"</option>
&prompt;</screen>
                </example>
            </section>

            <section>
                <title>Reliable job submit</title>

                <para>
                The &globusrun; command supports a two-phase commit
                protocol to ensure that the client knows the contact of the
                job which has been created so that it can be monitored or 
                canceled in the case of a client or service error. The
                two-phase commit affects both job submission and termination.
                </para>

                <para>
                The two-phase protocol is enabled by using the
                <literal>two_phase</literal> RSL attribute, as in the next
                example. When this is enabled, job submission will fail with
                the error
                <literal>GLOBUS_GRAM_PROTOCOL_ERROR_WAITING_FOR_COMMIT</literal>.
                The client must respond to this signal with
                either the
                <literal>GLOBUS_GRAM_PROTOCOL_JOB_SIGNAL_COMMIT_REQUEST</literal>
                or
                <literal>GLOBUS_GRAM_PROTOCOL_JOB_SIGNAL_COMMIT_EXTEND</literal>
                signals to either commit the job to execution or delay the 
                commit timeout. One of these signals must be sent prior to the
                two phase commit timeout, or the job will be discarded by the
                GRAM service.
                </para>

                <para>
                A two phase protocol is also used at job termination if the
                <literal>save_state</literal> RSL attribute is used along with
                the <literal>two_phase</literal> attribute. When the
                job manager sends a callback with the job state set to
                <literal>GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE</literal> or
                <literal>GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE</literal> it will
                wait to clean up the job until the two phase commit occurs. The
                client must reply with the
                <literal>GLOBUS_GRAM_PROTOCOL_JOB_SIGNAL_COMMIT_END</literal>
                signal to cause the job to be cleaned. Otherwise, the job
                will be unloaded from memory until a client restarts the job
                and sends the signal.
                </para>

                <example>
                    <title>Two phase commit example</title>

                    <para>
                    In this example, the user submits a job with a
                    <literal>two_phase</literal> timeout of 30 seconds and the
                    <literal>save_state</literal> attribute. The client must
                    send commit signals to ensure the job runs.
                    </para>

                    <screen>&prompt;&globusrun; <option>-r grid.example.org/jobmanager-pbs \
    "&amp;(two_phase = 30) \
      (save_state = yes) \
      (executable = a.out)"</option>
<computeroutput>
globus_gram_client_callback_allow successful
GRAM Job submission successful
GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING
GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE
GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE</computeroutput>
&prompt;</screen>
                </example>
            </section>

            <section>
                <title>Reconnecting to a job</title>

                <para>
                If a job manager or client exits before a job has completed,
                the job will continue to run. The client can reconnect to a job
                manager and receive job state notifications and output using
                the <literal>restart</literal> RSL attribute.
                </para>

                <example>
                    <title>Restart example</title>

                    <para>
                    This example uses <command>globus-job-submit</command> to
                    submit a batch job and then &globusrun; to reconnect to
                    the job.
                    </para>

                    <screen>&prompt;<command>globus-job-submit</command> <option>grid.example.org/jobmanager-pbs /bin/sleep 90</option>
<computeroutput>https://grid.example.org:38824/16001746665595486521/5295612977486005662/</computeroutput>
&prompt;&globusrun; <option>-r grid.example.org/jobmanager-pbs \
    "&amp;(restart = https://grid.example.org:38824/16001746665595486521/5295612977486005662/)"</option>
<computeroutput>globus_gram_client_callback_allow successful
GRAM Job submission successful
GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE</computeroutput>
&prompt;</screen>
                </example>

            </section>

            <section>
                <title>Submitting a Java job</title>

                <para>
                To submit a job that runs a java program, the client must
                ensure that the job can find the Java interpreter and its
                classes. This example sets the default <envar>PATH</envar>
                and <envar>CLASSPATH</envar> environment variables and
                uses the shell to locate the path to the <command>java</command>
                program.
                </para>

                <example>
                    <title>Java example</title>

                    <para>
                    This example uses <command>globus-job-submit</command> to
                    submit a java job, staging a jar file from a remote
                    service.
                    </para>

                    <screen>&prompt;&globusrun; <option>-r grid.example.org/jobmanager-pbs \
    "&amp;(environment = (PATH '/usr/bin:/bin') (CLASSPATH \$(SCRATCH_DIRECTORY)))
      (scratch_dir = \$(HOME)) 
      (directory = \$(SCRATCH_DIRECTORY))
      (rsl_substitution = (JAVA_SERVER http://java.example.org))
      (file_stage_in = 
          (\$(JAVA_SERVER)/example.jar \$(SCRATCH_DIRECTORY)/example.jar) 
          (\$(JAVA_SERVER)/support.jar \$(SCRATCH_DIRECTORY)/support.jar))
      (executable=/bin/sh)
      (arguments=-c 'java -jar example.jar')"</option>
<computeroutput>globus_gram_client_callback_allow successful
GRAM Job submission successful
GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING
GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE
GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE</computeroutput>
&prompt;</screen>
                </example>

            </section>
    </section>

</chapter>


<chapter id="gram5-user-troubleshooting"><title>Troubleshooting</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM5_Troubleshooting_User_Frag.xml"/>
</chapter>

<chapter id="gram5-user-clientcli">
<title>Command-line Client Reference Pages</title>
<para>
This section contains reference pages for all of the tools described in the
previous section. These pages contain all the command-line options for these
tools. These are available as manpages in the documentation subpackages for 
the globus-gram-client-tools package.
</para>

<xi:include href="../globusrun-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="../globus-job-cancel-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="../globus-job-clean-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="../globus-job-get-output-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="../globus-job-run-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="../globus-job-status-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="../globus-job-submit-manual.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
</chapter>

<chapter id="gram5-user-rsl"><title>GRAM RSL Quick Reference</title>

<para>
The GRAM RSL language is described in detail in the <olink
targetdoc="gram5Developer" targetptr="gram5-rsl">GRAM Developer's Guide</olink>. For basic use,
job description RSLs consist of a set of RSL attributes preceded by the &amp; character. The basic
job description looks like:
<programlisting>&amp;
    (<replaceable>attribute</replaceable> = <replaceable>value</replaceable> )
    (<replaceable>attribute</replaceable> = <replaceable>value</replaceable> )
    ...
    </programlisting>
</para>

<para>
The following list contains the RSL attributes which are available in the core
job manager. Other LRM-specific RSL attributes may also be available in some situations.

<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM5_RSL_Attribute_List.xml"/>

</para>
</chapter>

<chapter id="gram5-user-errors"><title>GRAM Error Message Reference</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM5_Errors_Frag.xml"/>
</chapter>

<chapter id="gram5-user-knownproblems"><title>Known Problems in GRAM5</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM5_Known_Problems_Frag.xml"/>
</chapter>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM5_Usage_Statistics_Frag.xml"/>

    <glossary role="auto" id="glossary-gram5User">
        <remark>some terms not in the docs but wanted in glossary: 
        <glossterm>Condor</glossterm>
        <glossterm>TORQUE</glossterm>
        <glossterm>Portable Batch System</glossterm>
        <glossterm>Oracle GridEngine</glossterm>
        </remark>
        <glossdiv><title>A</title>
            <glossentry>
                <glossterm>Dummy term</glossterm>
                <glossdef>
                    <para>This is a dummy entry for the automatic glossary database. Do not edit.</para>
                </glossdef>
            </glossentry>
        </glossdiv>
    </glossary>
    <index type="gram5">
    <title>Index</title>
</index>
</book>
