<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!ENTITY GRAM "GRAM5" >
<!ENTITY % xinclude SYSTEM "../../xinclude.mod">
%xinclude;
]>

<section id="gram5-lrma-tutorial-perl">
<title>LRM Adapter Perl Module</title>

    <para>
    The Perl-language LRM module provides the job submission and
    cancelling interface between &GRAM; and the underlying
    scheduler. Very little has been added to this part of the scheduler
    interface since Globus Toolkit 2---if you have a version for an
    older Globus Toolkit release, you can ignore most of this tutorial and jump
    to the <olink targetptr="gram5-lrma-tutorial-perl-changes"/>  section of
    this tutorial. The module annotated below is available from <ulink
    url="fake.pm"/>.
    </para>

    <section>
    <title>Perl LRM Adapter Module</title>
    <para>The LRM Adapter interface is implemented as a Perl module which is a
    subclass of the <classname>Globus::GRAM::JobManager</classname> module. Its
    name must match the type string used when the job manager is
    started, but in all lower case: for the fake LRM, the module name is
    <classname>Globus::GRAM::JobManager::fake</classname> and it is stored in
    the file <filename>fake.pm</filename>.  Though there are several methods in
    the <olink
    targetptr="Globus::GRAM::JobManager"><classname>Globus::GRAM::JobManager
    interface</classname></olink>, the only ones which
    absolutely need to be implemented in a scheduler module are
    <methodname>submit</methodname> and
    <methodname>cancel</methodname>. The <methodname>poll</methodname>
    can be used if there is no SEG module for your LRM Adapter, but
    using polling can be resource intensive and slow. We'll present
    the methods in the module one by one, but the entire module
    can be downloaded from here: <ulink url="fake.pm">fake.pm</ulink>.</para>

    <para>We'll begin by looking at the start of the
    <filename>fake.pm</filename> source module To begin the script, we import
    the GRAM support modules into the LRM adapter module's namespace, declare
    the module's package, and declare this module as a subclass of the
    <classname>Globus::GRAM::JobManager</classname>
    module.  All LRM adapter packages will need to do this, substituting the
    name of the LRM type being implemented where we see
    <literal>fake</literal>
    below.</para>

    <programlisting><xi:include
            xmlns:xi="http://www.w3.org/2001/XInclude"
            href="fake-prologue.pm"
            parse="text"/></programlisting>

    <para>Next, we declare any system-specific values which will be read
    from the configuration file.  In the fake case, we will declare a 
    module-global directory for job information and for SEG log entries.
    In real LRM Adapters, there are often variables which
    are loaded from the configuration file for such things as
    the list of available queues, paths to executables such as
    <command>mpiexec</command>,
    and any other site-specific configuration.

    <programlisting id="gram5-LRM-Adapter-Perl-Config"><xi:include
            xmlns:xi="http://www.w3.org/2001/XInclude"
            href="fake-config.pm"
            parse="text"/></programlisting>
    </para>

    <section>
    <title>Writing a Constructor</title>

    <para>For LRM Adapter interfaces which need to setup some data before
    calling their other methods, they can overload the <methodname>new</methodname> method
    which acts as a constructor. Scheduler scripts which don't need any
    per-instance initialization will not need to provide a constructor, the
    default <methodname>Globus::GRAM::JobManager::new</methodname> constructor will do
    the job.</para>

    <para>If you do need to overloaded this method, be sure to call the
    parent module's constructor to allow it to do its initialization. In
    this example, we create an object which includes a sequence number to
    ensure that the job ids returned from the LRM script is unique.

    <programlisting><xi:include
            xmlns:xi="http://www.w3.org/2001/XInclude"
            href="fake-constructor.pm"
            parse="text"/></programlisting>
    </para>

    <para>The job interface methods are called with only one argument: the
    LRM Adapter object itself. That object contains a
    <classname>Globus::GRAM::JobDescription</classname> object
    (<code>$self->{JobDescription}</code>) which includes the values from
    the RSL associated with the request, as well as a few extra
    values:

    <variablelist>
    <varlistentry>
      <term>job_id</term>
      <listitem><simpara>The string returned as the value of JOB_ID in the
        eturn hash from submit.  This won't be present for methods called
        before the job is submitted.</simpara></listitem>
    </varlistentry>

    <varlistentry>
        <term>uniq_id</term>
        <listitem><simpara>A string associated with this job request by the job
        manager program. It will be unique for all jobs on a host for all time
        and might be useful in creating temporary files or LRM-specific
        processing.</simpara></listitem>
    </varlistentry>
    </variablelist>
    </para>

    <para>
    Now, let's look at the methods which will interface to the LRM.
    </para>
    </section> <!-- Writing a Constructor -->

    <section>
    <title>Submitting Jobs</title>
    <para>All LRM adapter modules must implement the
    <methodname>submit</methodname> method. This method
    is called when the job manager wishes to submit the job to the LRM.
    The information in the original job request RSL string is available to
    the LRM adapter interface through the
    <structfield>JobDescription</structfield> data member of its hash.</para>

    <para>For most LRM Adapters, this is the longest method to be implemented,
    as it must decide what to do with the job description, and convert RSL
    elements to something which the LRM can understand.</para>

    <para>For our fake adapter, we will validate that the two RSL attributes
    we process are integers, and if so generate a new unique LRM
    ID and return it and the state
    <code>Globus::GRAM::JobState::PENDING</code>. Note the call to
    <methodname>respond</methodname> with 
    <literal>GT3_FAILURE_MESSAGE</literal>. This allows the &GRAM; client
    application to see the context-sensitive error message along with the
    general failure code from &GRAM;.

    <programlisting><xi:include
            xmlns:xi="http://www.w3.org/2001/XInclude"
            href="fake-submit.pm"
            parse="text"/></programlisting>
    </para>

    <para>That finishes the submit method. Most of the functionality for the
    scheduler interface is now written. 
    </para>
    </section> <!-- Submitting Jobs -->

    <section>
    <title>Polling Job State</title>
    <para>
    &GRAM; requires some way to determine the state of a job. In most systems,
    writing a Scheduler Event Generator module will provide the best
    performance and lowest resource overhead. However, when developing an LRM
    adapter, it is helpful to implement the polling interface so that the
    submission and cancel mechanism can be tested independent of having the
    SEG module completed. For the <literal>fake</literal> LRM Adapter, we'll
    write a simple <methodname>poll</methodname> method which will compare the
    current time with the time when the job was originally submitted. 

    <programlisting><xi:include 
            xmlns:xi="http://www.w3.org/2001/XInclude" 
            href="fake-poll.pm"
            parse="text"/></programlisting>
    </para>

    </section> <!-- Polling Job State -->

    <section>
    <title>Cancelling Jobs</title>

    <para>All LRM Adapter modules must also implement the
    <methodname>cancel</methodname> method. The
    purpose of this method is to cancel a job, whether it's already
    running or waiting in a queue.</para>

    <para>This method will be given the job ID as part of the JobDescription
    object in the manager object.  If the LRM interface provides
    feedback that the job was cancelled successfully, then we can return a
    JOB_STATE change to the FAILED state.  Otherwise we can return an empty
    hash reference, and let either the Scheduler Event Generator or a
    subsequent call to poll determine when the state change occurs.</para>

    <para>For the <literal>fake</literal> LRM adapter, we will update the
    job file with a cancellation time and return the
    <literal>Globus::GRAM::JobState::FAILED</literal> state change.

    <programlisting><xi:include
            xmlns:xi="http://www.w3.org/2001/XInclude"
            href="fake-cancel.pm"
            parse="text"/></programlisting>
    </para>

    </section> <!-- Cancelling Jobs -->

    <section>
    <title>End of the script</title>

    <para>It is required that all perl modules return a non-zero value when
    they are parsed. To do this, make sure the last line of your module
    consists of:

    <programlisting><xi:include
            xmlns:xi="http://www.w3.org/2001/XInclude"
            href="fake-epilogue.pm"
            parse="text"/></programlisting>
    </para>
    </section> <!-- End of the script -->
    </section> <!-- Perl LRM Adapter Module -->

</section> <!-- Perl Module Interface -->
