<!DOCTYPE reference PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
     Generated by Pod::DocBook v1.2, using:
       Digest::MD5 v2.39
       Pod::Parser v1.37
       Pod::ParseLink v1.10
       Text::ParseWords v3.27
       Text::Wrap v2009.0305
-->
<refentry id="Globus::GRAM::JobDescription">
  <refmeta>
    <refentrytitle>Globus::GRAM::JobDescription</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>Globus::GRAM::JobDescription</refname>
<refpurpose>GRAM Job Description</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>use Globus::GRAM::JobDescription;</synopsis>
<synopsis>$hash = { executable => [ '/bin/echo' ], arguments => [ 'hello' ] };
$description = new Globus::GRAM::JobDescription($filename);
$description = new Globus::GRAM::JobDescription($hash);
$executable = $description->executable();
$description->add($new_attribute, $new_value);
$description->save();
$description->save($filename);
$description->print_recursive($file_handle);</synopsis>
  </refsynopsisdiv>
  <refsection id="ID-0438a8e2a51c2613b43085fb482b3c22"><title>DESCRIPTION</title>
    <para>
      This object contains the parameters of a job request in a simple
      object wrapper. The object may be queried to determine the value of
      any RSL parameter, may be updated with new parameters, and may be
      saved in the filesystem for later use.
    </para>
    <refsection id="ID-2f6bf008e67124e4a12aa84b09ebfce3"><title>Methods</title>
      <para>
        <variablelist>
          <varlistentry>
            <term id="ID-74385b5162c5e23f79e412f6afc5e8ad">new Globus::GRAM::JobDescription(<emphasis role="italic">$filename</emphasis>)</term>
            <listitem>
              <para>
		A JobDescription is constructed from a file consisting of a
		Perl hash of parameter =&gt; array mappings. Every value in
		the Job Description is stored internally as an array, even
		single literals, similar to the way an RSL tree is parsed
		in C. An example of such a file is
              </para>
              <screen><![CDATA[$description =
{
    executable  => [ '/bin/echo' ], 
    arguments   => [ 'hello', 'world' ],
    environment => [
                       [
                           'GLOBUS_GRAM_JOB_CONTACT',
                           'https://globus.org:1234/2345/4332'
                       ]
                   ]
};]]></screen>
              <para>
		which corresponds to the rsl fragment
              </para>
              <screen><![CDATA[&(executable  = /bin/echo)
 (arguments   = hello world)
 (environment =
     (GLOBUS_GRAM_JOB_CONTACT 'https://globus.org:1234/2345/4332')
 )]]></screen>
              <para>
		When the library_path RSL attribute is specified, this
		object modifies the environment RSL attribute value to
		append its value to any system specific variables.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-abb69df1b240687f8e028b70941194b0">$description-&gt;<emphasis role="italic">add</emphasis>('name', <emphasis role="italic">$value</emphasis>);</term>
            <listitem>
              <para>
		Add a parameter to a job description. The parameter will be
		normalized internally so that the access methods described
		below will work with this new parameter. As an example,
              </para>
              <screen><![CDATA[$description->add('new_attribute', $new_value)]]></screen>
              <para>
		will create a new attribute in the JobDescription, which
		can be accessed by calling the <emphasis
		role="italic">$description-</emphasis>new_attribute&gt;()
		method.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-ada8ea436a907ef2d73d291cb105ec4d"><emphasis role="italic">$value</emphasis> $description-&gt;<emphasis role="italic">get</emphasis>('name');</term>
            <listitem>
              <para>
		Get a parameter from a job description. As an example,
              </para>
              <screen><![CDATA[$description->get('attribute')]]></screen>
              <para>
		will return the appropriate attribute in the JobDescription
		by name.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-14d7b20c9e1cdeda353d9017e46c5d66">$description-&gt;<emphasis role="italic">save</emphasis>([$filename])</term>
            <listitem>
              <para>
		Save the JobDescription, including any added parameters, to
		the file named by $filename if present, or replacing the
		file used in constructing the object.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-1a5a86b1c3053bcde3f55ebbb82a82d5">$description-&gt;<emphasis role="italic">print_recursive</emphasis>($file_handle)</term>
            <listitem>
              <para>
		Write the value of the job description object to the file
		handle specified in the argument list.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-8e9378d37c657b780fd10e0023540e33">$description-&gt;<emphasis role="italic">parameter</emphasis>()</term>
            <listitem>
              <para>
		For any parameter defined in the JobDescription can be
		accessed by calling the method named by the parameter. The
		method names are automatically created when the
		JobDescription is created, and may be invoked with
		arbitrary SillyCaps or underscores. That is, the parameter
		gram_myjob may be accessed by the GramMyJob, grammyjob, or
		gram_my_job method names (and others).
              </para>
              <para>
		If the attributes does not in this object, then undef will
		be returned.
              </para>
              <para>
		In a list context, this returns the list of values
		associated with an attribute.
              </para>
              <para>
		In a scalar context, if the attribute's value consist of a
		single literal, then that literal will be returned,
		otherwise undef will be returned.
              </para>
              <para>
		For example, from a JobDescription called $d constructed
		from a description file containing
              </para>
              <screen><![CDATA[{
    executable => [ '/bin/echo' ],
    arguments  => [ 'hello', 'world' ]
}]]></screen>
              <para>
		The following will hold:
              </para>
              <screen><![CDATA[$executable = $d->executable()    # '/bin/echo'
$arguments = $d->arguments()      # undef
@executable = $d->executable()    # ('/bin/echo')
@arguments = $d->arguments()      # ('hello', 'world')
$not_present = $d->not_present()  # undef
@not_present = $d->not_present()  # ()]]></screen>
              <para>
		To test for existence of a value:
              </para>
              <screen><![CDATA[@not_present = $d->not_present()
print "Not defined\n" if(!defined($not_present[0]));]]></screen>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
  </refsection>
</refentry>
