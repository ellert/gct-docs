<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!ENTITY GRAM "GRAM5" >
<!ENTITY % xinclude SYSTEM "../../xinclude.mod">
%xinclude;
]>

<section id="gram5-lrma-tutorial-perl-changes">
    <title>Changes from Previous Versions</title>
    <section>
    <title>Changes in GT 5.2</title>
    <para>&GRAM; is now designed to work as a native debian or RPM package,
    with default configuration being done at configuration time, so the setup
    script description has been removed. 
    </para>
    </section> <!-- Changes in GT 5.2 -->

    <section>
    <title>Changes in GT 5.0</title>
    <para>&GRAM; is based again on the C code base used for GRAM2 (also known
    as Pre-WS GRAM). The SEG module interface from GRAM4 is retained and
    optionally used by &GRAM;. The GRAM job manager will avoid reloading
    the GRAM LRM Adapter script for each operation, so all variables not
    intended to be global state in the Perl LRM Adapter module must be
    lexically scoped, or state will leak between jobs and cause potentially
    cause problems.
    </para>
    </section> <!-- Changes in GT 5.0 -->


    <section>
    <title>Changes in GT 4.0</title>

    <section>
    <title>Module Methods</title>
    <para>The GT-4.0 ws-GRAM service only calls a subset of the Perl methods
    which were used by the pre-ws GRAM services. Most importantly for script
    implementors, the polling method is no longer used. Instead, the
    scheduler-event-generator monitors jobs to signal the service when job
    change changes occur. Staging is now done via the Reliable File Transfer
    service, so the file_stage_in and file_stage_out methods are no longer
    called. Schedulers typically did not implement the staging methods,
    so this shouldn't affect most scheduler modules.
    </para>

    <para>That being said, scheduler implementers which would like to have
    their scheduler both with pre-ws GRAM and WS-GRAM should definitely
    implement the poll() method described in the pre-WS version of this
    tutorial.</para>
    </section> <!-- Module Methods -->

    <section>
    <title>GASS Cache</title>
    <para>The GT-4.0 ws-GRAM service does not use the GASS cache for storing
    temporary files or for staging files. </para>

    </section> <!-- GASS Cache -->
    </section> <!-- Changes in GT 4.0 -->

    <section>
    <title>Changes in GT 3.2</title>
    <para>
    In GT 3.2, additional error message context info was added. Scripts can
    optionally add one of these fields to the return hash from an operation
    to provide extra error information to the client:
    <variablelist>
        <varlistentry>
        <term>GT3_FAILURE_MESSAGE</term>
        <listitem><simpara>Error message from underlying script processing
        indicating what caused a job request to fail</simpara></listitem>
        </varlistentry>
        
        <varlistentry>
        <term>GT3_FAILURE_TYPE</term>
        <listitem><simpara>One of <literal>filestagein</literal>,
        <literal>filestageout</literal>, <literal>filestageinshared</literal>,
        <literal>executable</literal>, or <literal>stdin</literal> indicating
        what job request element caused a staging fault.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>GT3_FAILURE_SOURCE</term>
        <listitem><simpara>Source URL or file for a failed staging
        operation</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>GT3_FAILURE_DESTINATION</term>
        <listitem><simpara>Destination URL or file for a failed staging
        operation</simpara></listitem>
        </varlistentry>
    </variablelist>
    </para>
    </section> <!-- Changes in GT 3.2 -->
</section> <!-- Changes From Previous Versions -->
