<!DOCTYPE reference PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
     Generated by Pod::DocBook v1.2, using:
       Digest::MD5 v2.39
       Pod::Parser v1.37
       Pod::ParseLink v1.10
       Text::ParseWords v3.27
       Text::Wrap v2009.0305
-->
<refentry id="Globus::GRAM::JobManager">
  <refmeta>
    <refentrytitle>Globus::GRAM::JobManager</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>Globus::GRAM::JobManager</refname>
<refpurpose>Base class for all Job Manager scripts</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>$manager = new Globus::GRAM::JobManager($job_description);</synopsis>
<synopsis>$manager->log("Starting new operation");
$manager->nfssync($fileobj,$createflag);
$manager->respond($hashref);
$hashref = $manager->submit();
$hashref = $manager->poll();
$hashref = $manager->cancel();
$hashref = $manager->signal();
$hashref = $manager->make_scratchdir();
$hashref = $manager->remove_scratchdir();
$hashref = $manager->rewrite_urls();
$hashref = $manager->stage_in();
$hashref = $manager->stage_out();
$hashref = $manager->cache_cleanup();
$hashref = $manager->remote_io_file_create();
$hashref = $manager->proxy_relocate();
$hashref = $manager->proxy_update();
$scalar  = $manager->pipe_out_cmd(@arglist);
($stderr, $rc) = $manager->pipe_err_cmd(@arglist);
$status  = $manager->fork_and_exec_cmd(@arglist);
$manager->append_path($hash, $variable, $path);
$scalar = $manager->setup_softenv();</synopsis>
  </refsynopsisdiv>
  <refsection id="ID-e96f19759006b55f2a0d9c05142531b8"><title>DESCRIPTION</title>
    <para>
      The Globus::GRAM::JobManager module implements the base behavior for
      a Job Manager script interface. Scheduler-specific job manager
      scripts must inherit from this module in order to be used by the job
      manager.
    </para>
    <refsection id="ID-68252c34977081809bd73a304acda1f6"><title>Methods</title>
      <para>
        <variablelist>
          <varlistentry>
            <term id="ID-f1a4bd07a91c2437a872f22bef743a61">$manager = Globus::GRAM::JobManager-&gt;new($JobDescription)</term>
            <listitem>
              <para>
		Each Globus::GRAM::JobManager object is created by calling
		the constructor with a single argument, a
		Globus::GRAM::JobDescription object containing the
		information about the job request which the script will be
		modifying. Modules which subclass Globus::GRAM::JobManager
		MUST call the super-class's constructor, as in this code
		fragment:
              </para>
              <screen><![CDATA[my $proto = shift;
my $class = ref($proto) || $proto;
my $self = $class->SUPER::new(@_);

bless $self, $class;]]></screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-5661a979efb43cfbf221c511a6dbfc34">$manager-&gt;log($string)</term>
            <listitem>
              <para>
		Log a message to the job manager log file. The message is
		preceded by a timestamp.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-9776ef1009a8a80280bb9c3b7e663582">$manager-&gt;nfssync($object,$create)</term>
            <listitem>
              <para>
		Send an NFS update by touching the file (or directory) in
		question. If the $create is true, a file will be created.
		If it is false, the $object will not be created.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-00e1765fdce34a7ea59d2e1c3272563d">$manager-&gt;respond($message)</term>
            <listitem>
              <para>
		Send a response to the job manager program. The response
		may either be a hash reference consisting of a hash of
		(variable, value) pairs, which will be returned to the job
		manager, or an already formatted string. This only needs to
		be directly called by a job manager implementation when the
		script wants to send a partial response while processing
		one of the scheduler interface methods (for example, to
		indicate that a file has been staged).
              </para>
              <para>
		The valid keys for a response are defined in the RESPONSES
		section.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-153f150e87f8248d358d9354b7bd8c94">$manager-&gt;submit()</term>
            <listitem>
              <para>
		Submit a job request to the scheduler. The default
		implementation returns with the
		Globus::GRAM::Error::UNIMPLEMENTED error. Scheduler
		specific subclasses should reimplement this method to
		submit the job to the scheduler.
              </para>
              <para>
		A scheduler which implements this method should return a
		hash reference containing a scheduler-specific job
		identifier as the value of the hash's JOB_ID key, and
		optionally, the a GRAM job state as the value of the hash's
		JOB_STATE key if the job submission was successful;
		otherwise a Globus::GRAM::Error value should be returned.
		The job state values are defined in the
		Globus::GRAM::JobState module. The job parameters (as found
		in the job rsl) are defined in Globus::GRAM::Jobdescription
		object in $self-&gt;{JobDescription}.
              </para>
              <para>
		For example:
              </para>
              <screen><![CDATA[return {JOB_STATE => Globus::GRAM::JobState::PENDING,
        JOB_ID => $job_id};]]></screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-c5f57900a40e9e419144bb602a2c944d">$manager-&gt;poll()</term>
            <listitem>
              <para>
		Poll a job's status. The default implementation returns
		with the Globus::GRAM::Error::UNIMPLEMENTED error.
		Scheduler specific subclasses should reimplement this
		method to poll the scheduler.
              </para>
              <para>
		A scheduler which implements this method should return a
		hash reference containing the JOB_STATE value. The job's ID
		can be accessed by calling the
		$self-&gt;{JobDescription}-&gt;jobid() method.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-4a349cc3019364a76106f3f051e90751">$manager-&gt;cancel()</term>
            <listitem>
              <para>
		Cancel a job. The default implementation returns with the
		Globus::GRAM::Error::UNIMPLEMENTED error. Scheduler
		specific subclasses should reimplement this method to
		remove the job from the scheduler.
              </para>
              <para>
		A scheduler which implements this method should return a
		hash reference containing the JOB_STATE value. The job's ID
		can be accessed by calling the
		$self-&gt;{JobDescription}-&gt;jobid() method.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-a3cb8b8490de619f9595436eb937ce91">$manager-&gt;signal()</term>
            <listitem>
              <para>
		Signal a job. The default implementation returns with the
		Globus::GRAM::Error::UNIMPLEMENTED error. Scheduler
		specific subclasses should reimplement this method to
		remove the job from the scheduler. The JobManager module
		can determine the job's ID, the signal number, and the
		(optional) signal arguments from the Job Description by
		calling it's job_id(), signal(), and and signal_arg()
		methods, respectively.
              </para>
              <para>
		Depending on the signal, it may be appropriate for the
		JobManager object to return a hash reference containing a
		JOB_STATE update.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-3e9f3b20104272b031385f09961fc4f5">$manager-&gt;make_scratchdir()</term>
            <listitem>
              <para>
		Create a scratch directory for a job. The scratch directory
		location is based on the JobDescription's
		scratch_dir_base() and scratch_dir() methods.
              </para>
              <para>
		If the scratch_dir() value is a relative path, then a
		directory will be created as a subdirectory of
		scratch_dir_base()/scratch_dir(), otherwise, it will be
		created as a subdirectory of scratch_dir().  This method
		will return a hash reference containing mapping SCRATCH_DIR
		to the absolute path of newly created scratch directory if
		successful.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-de07007fccf276770e60e3e268b83e7f">$manager-&gt;remove_scratchdir()</term>
            <listitem>
              <para>
		Delete a job's scratch directory. All files and
		subdirectories of the JobDescription's scratch_directory()
		will be deleted.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-4159d9ea9a5431081d5fbcb295ddf46f">$manager-&gt;file_cleanup()</term>
            <listitem>
              <para>
		Delete some job-related files. All files listed in the
		JobDescription's file_cleanup() array will be deleted.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-dad2ce58b4c3b28536074d909bb447d3">$manager-&gt;rewrite_urls()</term>
            <listitem>
              <para>
		Looks up URLs listed in the JobDescription's stdin() and
		executable(), and replaces them with paths to locally
		cached copies.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-768d39610a5dac33f97323cd0a4da486">$manager-&gt;stage_in()</term>
            <listitem>
              <para>
		Stage input files need for the job from remote storage. The
		files to be staged are defined by the array of [URL, path]
		pairs in the job description's file_stage_in() and
		file_stage_in_shared() methods. The
		Globus::GRAM::JobManager module provides an implementation
		of this functionality using the globus-url-copy and
		globus-gass-cache programs. Files which are staged in are
		not automatically removed when the job terminates.
              </para>
              <para>
		This function returns intermediate responses using the
		Globus::GRAM::JobManager::response() method to let the job
		manager know when each individual file has been staged.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-119cb24a5ad939da51c222f4432c7683">$manager-&gt;stage_out()</term>
            <listitem>
              <para>
		Stage output files generated by this job to remote storage.
		The files to be staged are defined by the array of [URL,
		destination] pairs in the job description's
		file_stage_out() method. The Globus::GRAM::JobManager
		module provides an implementation of this functionality
		using the globus-url-copy program.  Files which are staged
		out are not removed by this method.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-7815404153c9b6c7bcd8d13d31aaa08e">$manager-&gt;cache_cleanup()</term>
            <listitem>
              <para>
		Clean up cache references in the GASS which match this
		job's cache tag .
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-03ece962c4144c053cc4ee0347af745c">$manager-&gt;remote_io_file_create()</term>
            <listitem>
              <para>
		Create the remote I/O file in the job dir which will
		contain the remote_io_url RSL attribute's value.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-d7633d4adbf1c137bd170b41fd310fe8">$manager-&gt;proxy_relocate()</term>
            <listitem>
              <para>
		Relocate the delegated proxy for job execution. Job
		Managers need to override the default if they intend to
		relocate the proxy into some common file system other than
		the cache. The job manager program does not depend on the
		new location of the proxy. Job Manager modules must not
		remove the default proxy.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-6a2bc7731ef59a20927a785ba55bc1e6">$hashref = $manager-&gt;proxy_update();</term>
            <listitem>
              <para></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-cda37eb31e0d9d121dbb66a282b134f1">$manager-&gt;append_path($ref, $var, $path)</term>
            <listitem>
              <para>
		Append $path to the value of $ref-&gt;{$var}, dealing with
		the case where $ref-&gt;{$var} is not yet defined.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-d0833062becb06e55fbbb13a3874ed1f">$manager-&gt;pipe_out_cmd(@arg)</term>
            <listitem>
              <para>
		Create a new process to run the first argument application
		with the remaining arguments (which may be empty). No shell
		metacharacter will be evaluated, avoiding a shell
		invocation. Stderr is redirected to /dev/null and stdout is
		being captured by the parent process, which is also the
		result returned.  In list mode, all lines are returned, in
		scalar mode, only the first line is being returned. The
		line termination character is already cut off. Use this
		function as more efficient backticks, if you do not need
		shell metacharacter evaluation.
              </para>
              <para>
		Caution: This function deviates in two manners from regular
		backticks. Firstly, it chomps the line terminator from the
		output. Secondly, it returns only the first line in scalar
		context instead of a multiline concatinated string. As with
		regular backticks, the result may be undefined in scalar
		context, if no result exists.
              </para>
              <para>
		A child error code with an exit code of 127 indicates that
		the application could not be run. The scalar result
		returned by this function is usually undef'ed in this case.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-0153f5589caafb644c3720b192410153">($stder, $rc) = $manager-&gt;pipe_err_cmd(@arg)</term>
            <listitem>
              <para>
		Create a new process to run the first argument application
		with the remaining arguments (which may be empty). No shell
		metacharacter will be evaluated, avoiding a shell
		invocation.
              </para>
              <para>
		This method returns a list of two items, the standard error
		of the program, and the exit code of the program.  If the
		error code is 127, then the application could not be run. 
		Standard output is discarded.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-a8a41d1993a179ebd64c6835f2abdfd2">$manager-&gt;fork_and_exec_cmd(@arg)</term>
            <listitem>
              <para>
		Fork off a child to run the first argument in the list.
		Remaining arguments will be passed, but shell interpolation
		is avoided. Signals SIGINT and SIGQUIT are ignored in the
		child process. Stdout is appended to /dev/null, and stderr
		is dup2 from stdout. The parent waits for the child to
		finish, and returns the value for the CHILD_ERROR variable
		as result. Use this function as more efficient system()
		call, if you can do not need shell metacharacter
		evaluation.
              </para>
              <para>
		Note that the inability to execute the program will result
		in a status code of 127.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-32c38475691eb00c5e8c6a62552cd978">$manager-&gt;job_dir()</term>
            <listitem>
              <para>
		Return the temporary directory to store job-related files,
		which have no need for file caching.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term id="ID-ab6ca04c6b90775f97ceb83837a62f07">$manager-&gt;setup_softenv()</term>
            <listitem>
              <para>
		Either add a line to the specified command script file
		handle to load the user's default SoftEnv configuration, or
		create a custom SoftEnv script and add commands to the
		specified command script file handle to load it.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
  </refsection>
  <refsection id="ID-bcb5fd9dba9a920db0007cc56619dab1"><title>RESPONSES</title>
    <para>
      When returning from a job interface method, or when sending an
      intermediate response via the <emphasis
      role="italic">response</emphasis>() method, the following hash keys
      are valid:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term id="ID-16358532f63dae6e705b970cda79f8f6">* JOB_STATE</term>
          <listitem>
            <para>
	      An integer job state value. These are enumerated in the
	      Globus::GRAM::JobState module.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term id="ID-692f8c03eebeb01d83454e2fb7c0eabc">* ERROR</term>
          <listitem>
            <para>
	      An integer error code. These are enumerated in the
	      Globus::GRAM::Error module.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term id="ID-5c48854cbbf2aabcad2ba36b91b93bc0">* JOB_ID</term>
          <listitem>
            <para>
	      A string containing a job identifier, which can be used to
	      poll, cancel, or signal a job in progress. This response
	      should only be returned by the <emphasis
	      role="italic">submit</emphasis> method.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term id="ID-4d7fe40cdacdc6b615d6c152578652fe">* SCRATCH_DIR</term>
          <listitem>
            <para>
	      A string containing the path to a newly-created scratch
	      directory. This response should only be returned by the
	      <emphasis role="italic">make_scratchdir</emphasis> method.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term id="ID-9034b7c1f844652f4877ae9996a5a8db">* STAGED_IN</term>
          <listitem>
            <para>
	      A string containing the (URL, path) pair for a file which has
	      now been staged in. This response should only be returned by
	      the <emphasis role="italic">stage_in</emphasis> method.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term id="ID-57fbff256acaaf1077c6f2caafbd1210">* STAGED_IN_SHARED</term>
          <listitem>
            <para>
	      A string containing the (URL, path) pair for a file which has
	      now been staged in and symlinked from the cache. This
	      response should only be returned by the <emphasis
	      role="italic">stage_in_shared</emphasis> method.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term id="ID-579b4aa8913a426b3f984875f648ae33">* STAGED_OUT</term>
          <listitem>
            <para>
	      A string containing the (path, URL) pair for a file which has
	      now been staged out by the script. This response should only
	      be returned by the <emphasis
	      role="italic">stage_out</emphasis> method.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
</refentry>
