<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!ENTITY GRAM "GRAM5" >
<!ENTITY % xinclude SYSTEM "../../xinclude.mod">
%xinclude;
]>

<section id="gram5-developer-lrm-adapter-tutorial-seg">
<title>LRM SEG Module</title>

<section>
<title>Intro</title>
<para> 
The Scheduler Event Generator (SEG) module provides an efficient job monitoring
interface between &GRAM; and the underlying local resource manager.  In most
cases, the SEG module parses a log generated by the local resource manager which
contains information about job state changes and then uses the <ulink
url="http://www.globus.org/api/c-globus-{$version}/globus_scheduler_event_generator/html/group__seg__api.html">SEG
API</ulink> to signal job state changes as they occur.
</para>

<para>A SEG module is implemented as a shared library which is loaded as a
globus extension. This means that the only entry point to the library is a
globus_module_descriptor, which defines activation and deactivation functions
for the library. For this tutorial, we will build up the SEG module piecewise, but the
<ulink url="seg_fake_module.c">entire fake SEG module source</ulink> can be
downloaded as well.
</para>
</section> <!-- Intro -->

<section><title>Outline</title>

<para>The outline for our SEG module is:
    <programlisting id="fake_seg_module_structure" role="seg_fake_module.c"><xref linkend="gram5-lrm-seg-module-headers"/>
<xref linkend="gram5-lrm-seg-module-specific-data"/>
<xref linkend="gram5-lrm-seg-module-prototypes"/>
<xref linkend="gram5-lrm-seg-module-descriptor"/>
<xref linkend="gram5-lrm-seg-module-activation"/>
<xref linkend="gram5-lrm-seg-module-deactivation"/>
<xref linkend="gram5-lrm-seg-module-process" />
<xref linkend="gram5-lrm-seg-module-utils"
/></programlisting>
From this outline, we'll explain the various sections of the source file below.
</para>
</section> <!-- Outline -->

<section id="gram5-lrm-seg-depdendencies">
<title>LRM Module Dependencies</title>
<para>
The LRM module uses the globus_common API from Globus for its linked list,
mutual exclusion, timed events, and module dependency tracking. It also uses
the Scheduler Event Generator APIs, which provide functions for defining and
emitting LRM events.
</para>

<formalpara id="gram5-lrm-seg-module-headers" xreflabel="Include Headers">
<title>Include Headers</title>
<para>
For our implementation, we'll need to include the headers for the Globus
modules we'll be using. In this case
we'll be using <filename>globus_common.h</filename>,
<filename>globus_scheduler_event_generator.h</filename> (which includes the API
for emitting SEG events), and <filename>globus_scheduler_event_generator_app.h</filename>
(which includes the SEG event type definitions).

<programlisting>#include "globus_common.h"
#include "globus_scheduler_event_generator.h"
#include "globus_scheduler_event_generator_app.h"</programlisting>
</para>
</formalpara>
</section> <!-- LRM Module Dependencies -->

<section id="gram5-lrm-seg-module-specific-data" xreflabel="Module Specific Data">
<title>Module Specific Data</title>
<para>For the fake LRM, we need to keep some global state to keep track of what we've
parsed from our LRM's log file, and what events are we should be sending in the future.
To do this, we define two data structures, a <structname>fake_job_info_t</structname>
which defines the set of event timestamps associated with a job, and
<structname>fake_state_t</structname> which contains the state of the fake SEG parser.

<programlisting><xref linkend="gram5-lrm-seg-fake-job-info" role="noindent"/>
<xref linkend="gram5-lrm-seg-fake-state" role="noindent"
/></programlisting>
</para>

<formalpara id="gram5-lrm-seg-fake-job-info" xreflabel="Fake Job Info">
<title>Fake Job Info</title>
<para>
For the <structname>fake_job_info_t</structname> structure, we will want to keep
track of the LRM id (an up to 64-character long string), and the timestamps for
the pending, active, failed, and done events for the job. We use the timestamp
value of <literal>0</literal> to indicate an event which will not happen or has
already been processed.
<programlisting>typedef struct
{
    char   jobid[64];
    time_t pending;
    time_t active;
    time_t failed;
    time_t done;
}
fake_job_info_t;
</programlisting>

In addition, we will keep a null initializer for the
<structname>fake_job_info_t</structname> structure so that we can simply
initialize dynamically allocated data.

<programlisting>
/* A statically-initialized empty job info which is used to initialize
 * dynamically allocated fake_job_info_t structs
 */
static fake_job_info_t fake_job_info_initializer;</programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-fake-state" xreflabel="LRM Parser State">
<title>LRM Parser State</title>
<para>
For the LRM parser state, we will keep track of the start time for which we will
emit events, the path to the fake job log, a file pointer open to that log, and 
a list of <structname>fake_job_info_t</structname> structs for each job we have
data for. We also use a mutex/condition variable combination to block deactivation
until all callback functions have completed. The data in this struct is
initialized in the module's activation function below. 

<programlisting>/**
 * State of the FAKE log file parser.
 */
static struct 
{
    /** Timestamp of when to start generating events from */
    time_t                              start_timestamp;
    /** Log file path */
    char *                              log_path;
    /** Log file pointer */
    FILE *                              log;
    /** List of job info containing future info we might need to
      * turn into job state changes
      */
    globus_list_t *                     jobs;
    /**
     * shutdown mutex
     */
    globus_mutex_t                      mutex;
    /**
     * shutdown condition
     */
    globus_cond_t                       cond;
    /**
     * shutdown flag
     */
    globus_bool_t                       shutdown_called;
    /**
     * callback count
     */
    int                                 callback_count;
} globus_l_fake_state;</programlisting>
</para>
</formalpara>
</section> <!-- Module Specific Data -->

<section id="gram5-lrm-seg-module-prototypes" xreflabel="Module Specific Prototypes">
<title>Module Specific Prototypes</title>
<para>For our SEG, we define a small number of static functions to process the fake
job log. These include our activation and deactivation functions, and our event callback
which is called periodically to process the fake job log. We also have a
couple of utility functions to look up entries in the job list and a predicate used
to sort a list of SEG events by timestamp and jobid.
<programlisting>static
int
globus_l_fake_module_activate(void);

static
int
globus_l_fake_module_deactivate(void);

static
void
globus_l_fake_read_callback(void *user_arg);

static
int
globus_l_fake_find_by_job_id(void * datum, void * arg);

static
int
globus_l_fake_compare_events(void * low_datum, void * high_datum, void * relation_args);</programlisting>
</para>
</section> <!-- Module Specific Prototypes -->

<section id="gram5-lrm-seg-module-descriptor" xreflabel="Extension Module Descriptor">
<title>Extension Module Descriptor</title>
<para>
The SEG dynamically loads our code using the Globus Extension API. To implement
the interface it needs, we must define an extension descriptor so that it can find
the entry point to our library. This module descriptor contains pointers to the
activation and deactivation functions we prototyped above. It can contain other
pointers but they aren't needed for our module implementation so we leave them
as NULL.

<programlisting>
GlobusExtensionDefineModule(globus_seg_fake) =
{
    "globus_seg_fake",
    globus_l_fake_module_activate,
    globus_l_fake_module_deactivate,
    NULL,
    NULL,
    NULL
};</programlisting>
</para>
</section> <!-- Extension Module Descriptor -->

<section id="gram5-lrm-seg-module-activation" xreflabel="Module Activation">
<title>Module Activation</title>
<para>
The entry point to our LRM-specific module is the activation function. This function is
invoked by the <command>globus-scheduler-event-generator</command> program when it starts
and dynamically loads the LRM-specific module. It is not passed any parameters, and is
expected to return <literal>GLOBUS_SUCCESS</literal> if it is able to activate itself.
Typically the activation function will do the following:
<programlisting>
static
int
globus_l_fake_module_activate(void)
{
<xref linkend="gram5-lrm-module-activate-declare-vars"/>
<xref linkend="gram5-lrm-module-activate-dependencies"/>
<xref linkend="gram5-lrm-module-activate-prepare-shutdown-handler"/>
<xref linkend="gram5-lrm-module-activate-read-configuration"/>
<xref linkend="gram5-lrm-module-activate-register-event"/>
<xref linkend="gram5-lrm-module-activate-cleanup-on-failure" role="noindent"/>
    return result;
} /* globus_l_fake_module_activate() */</programlisting>
</para>

<formalpara id="gram5-lrm-module-activate-declare-vars"
    xreflabel="Declare Variables">
<title>Declare Variables</title>
<para>
For our activation function, we'll use variables to store the path to the configuration
file as well as return values from functions we call.

<programlisting><![CDATA[char *                              config_path = NULL;
char *                              log_dir;
int                                 rc;
globus_result_t                     result = GLOBUS_SUCCESS;]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-module-activate-dependencies"
    xreflabel="Activate Dependencies">
<title>Activate Dependencies</title>
<para>
The headers we've just included contain the module descriptors which we will activate
in our LRM-specific activation function, so that we are able to use the APIs in
those modules. Our module is only ever activated by the SEG module, so we shouldn't activate
it. In the activation function for our module, we'll include this fragment

<programlisting><![CDATA[rc = globus_module_activate(GLOBUS_COMMON_MODULE);
if (rc != GLOBUS_SUCCESS)
{
    fprintf(stderr, "Fatal error activating GLOBUS_COMMON_MODULE\n");

    result = GLOBUS_FAILURE;
    goto activation_failure;
}]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-module-activate-prepare-shutdown-handler" xreflabel="Prepare Shutdown Handler">
<title>Prepare Shutdown Handler</title>
<para>
To handling deactivation safely, we'll create a mutex and condition variable
to handle the case of when a shutdown is called while our event handler is
running. In that case, we'll set the <varname>shutdown_called</varname>
variable to <literal>GLOBUS_TRUE</literal> and then wait until the callback 
has terminated. Here we just set the variables to their non-shutdown values.

<programlisting><![CDATA[rc = globus_mutex_init(&globus_l_fake_state.mutex, NULL);
if (rc != GLOBUS_SUCCESS)
{
    result = GLOBUS_FAILURE;
    goto mutex_init_failed;
}

rc = globus_cond_init(&globus_l_fake_state.cond, NULL);
if (rc != GLOBUS_SUCCESS)
{
    result = GLOBUS_FAILURE;
    goto cond_init_failed;
}
globus_l_fake_state.shutdown_called = GLOBUS_FALSE;
globus_l_fake_state.callback_count = 0;]]></programlisting>
</para>
</formalpara>

<section id="gram5-lrm-module-activate-read-configuration" xreflabel="Read Configuration">
<title>LRM SEG Module Configuration</title>
<formalpara id="gram5-lrm-module-activate-prepare-read-configuration">
<title>Read Configuration</title>
<para>
There are two main pieces of configuation information we'll need to process SEG events: the
earliest timestamp we care about (which we get from the SEG module) and the path to our
fake job log file (which we get from our configuration file as in the perl module).
</para>
</formalpara>
<para>
So first, to get the timestamp, we'll use the
<function>globus_scheduler_event_generator_get_timestamp()</function> function.

<programlisting><![CDATA[result = globus_scheduler_event_generator_get_timestamp(
        &globus_l_fake_state.start_timestamp);
if (result != GLOBUS_SUCCESS)
{
    goto get_timestamp_failed;
}]]></programlisting>
</para>
<para>Then, to get the configuration file data, we first construct the path to
the configuration file and then pull out the configuration attribute
<literal>log_path</literal>, falling back to the default
(<filename><replaceable>${localstatedir}</replaceable>/fake</filename> if it is
not found.

<programlisting><![CDATA[
result = globus_eval_path(
        "${sysconfdir}/globus/globus-fake.conf",
        &config_path);
if (result != GLOBUS_SUCCESS || config_path == NULL)
{
    goto get_config_path_failed;
}
result = globus_common_get_attribute_from_config_file(
        "",
        config_path,
        "log_path",
        &log_dir);

/* This default must match fake.pm's default for things to work */
if (result != GLOBUS_SUCCESS)
{
    result = globus_eval_path("${localstatedir}/fake", &log_dir);
}

if (result != GLOBUS_SUCCESS)
{
    goto get_log_dir_failed;
}

globus_l_fake_state.log_path =
    globus_common_create_string("%s/fakejob.log", log_dir);
if (globus_l_fake_state.log_path == NULL)
{
    result = GLOBUS_FAILURE;

    goto get_log_path_failed;
}]]></programlisting>
</para>
</section> <!-- Read Configuration -->

<section id="gram5-lrm-module-activate-register-event" xreflabel="Register Event">
<title>Register Event</title>
<para>
The next main action the activation function does is to register an event to happen
later to process the events in the LRM log. For this, we use the
<function>globus_callback_register_oneshot()</function> function to register an
event handler to execute as soon as possible within the
<command>globus-scheduduler-event-generator</command> program. The callback function 
in this case is the globus_l_fake_read_callback() function defined later.

<programlisting><![CDATA[result = globus_callback_register_oneshot(
        NULL,
        NULL,
        globus_l_fake_read_callback,
        &globus_l_fake_state);
if (result != GLOBUS_SUCCESS)
{
    goto register_oneshot_failed;
}
globus_l_fake_state.callback_count++;
]]></programlisting>
</para>
</section> <!-- Register Event -->

<section id="gram5-lrm-module-activate-cleanup-on-failure" xreflabel="Cleanup on Failure">
<title>Cleanup on Failure</title>
<para>Here we handle the errors that might have occurred above and free temporarily used
memory. In case of a failure, <varname>result</varname> is set to something other than
<literal>GLOBUS_SUCCESS</literal>.
<programlisting><![CDATA[register_oneshot_failed:
get_log_path_failed:
    if (result != GLOBUS_SUCCESS)
    {
        free(globus_l_fake_state.log_path);
    }
    free(log_dir);
get_log_dir_failed:
    free(config_path);
get_config_path_failed:
get_timestamp_failed:
    if (result != GLOBUS_SUCCESS)
    {
malloc_state_failed:
        globus_cond_destroy(&globus_l_fake_state.cond);
cond_init_failed:
        globus_mutex_destroy(&globus_l_fake_state.mutex);
mutex_init_failed:
        globus_module_deactivate(GLOBUS_COMMON_MODULE);
    }
activation_failure:]]></programlisting>
</para>
</section> <!-- Cleanup on Failure -->
</section> <!-- Module Activation -->
<section id="gram5-lrm-seg-module-deactivation" xreflabel="Module Deactivation">
<title>Module Deactivation</title>
<para>
For our deactivation function, we will wait use the shutdown handling variables
in the state structure to wait until all outstanding callback have terminated and
then free memory associated with the state.

<programlisting>static
int
globus_l_fake_module_deactivate(void)
{
    <xref linkend="gram5-lrm-seg-deactivate-shutdown"/>
    <xref linkend="gram5-lrm-seg-deactivate-free-state"/>
} /* globus_l_fake_module_deactivate() */</programlisting>
</para>

<formalpara id="gram5-lrm-seg-deactivate-shutdown" xreflabel="Shutdown Handling">
<title>Shutdown Handling</title>
<para>
To handle shutdown safely, we must wait until pending callbacks have
terminated.  To do this, we set the <structfield>shutdown_called</structfield>
field in the state structure and wait until the
<structfield>callback_count</structfield> field is <literal>0</literal>. Inside
the callback function, if we see that the
<structfield>shutdown_called</structfield> field is
<literal>GLOBUS_TRUE</literal> then it will not reregister itself and will
signal when it terminates.

<programlisting><![CDATA[globus_mutex_lock(&globus_l_fake_state.mutex);
globus_l_fake_state.shutdown_called = GLOBUS_TRUE;
while (globus_l_fake_state.callback_count > 0)
{
    globus_cond_wait(&globus_l_fake_state.cond, &globus_l_fake_state.mutex);
}
globus_mutex_unlock(&globus_l_fake_state.mutex);]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-deactivate-free-state" xreflabel="Cleanup State">
<title>Cleanup State</title>
<para>
Finally, we'll free data we allocated in the activation function.

<programlisting><![CDATA[globus_mutex_destroy(&globus_l_fake_state.mutex);
globus_cond_destroy(&globus_l_fake_state.cond);
if (globus_l_fake_state.log_path)
{
    free(globus_l_fake_state.log_path);
}
if (globus_l_fake_state.log)
{
    fclose(globus_l_fake_state.log);
}
while (!globus_list_empty(globus_l_fake_state.jobs))
{
    fake_job_info_t *info;
    
    info = globus_list_remove(
            &globus_l_fake_state.jobs,
            globus_l_fake_state.jobs);
    free(info);
}

globus_module_deactivate(GLOBUS_COMMON_MODULE);

return GLOBUS_SUCCESS;]]></programlisting>
</para>
</formalpara>
</section> <!-- Deactivation -->

<section id="gram5-lrm-seg-module-process" xreflabel="Process Events">
<title>Process Events</title>
<para>
The main activity of our LRM module is to generate SEG events so that a job manager
will be able to efficient manage its jobs. In this code, we will parse our log file
periodically, and fire off any events which are to have occurred for the jobs in the
fake job log. The structure of the processing function is this

<programlisting>
static
void
globus_l_fake_read_callback(void * arg)
{
<xref linkend="gram5-lrm-seg-read-declare-vars"/>
<xref linkend="gram5-lrm-seg-read-check-for-shutdown"/>
<xref linkend="gram5-lrm-seg-read-open-log"/>
<xref linkend="gram5-lrm-seg-read-read-log"/>
<xref linkend="gram5-lrm-seg-read-create-events"/>
<xref linkend="gram5-lrm-seg-read-emit-events"/>
<xref linkend="gram5-lrm-seg-read-reregister"/>
<xref linkend="gram5-lrm-seg-read-error-handling"/>
} /* globus_l_fake_read_callback() */</programlisting>
</para>

<formalpara id="gram5-lrm-seg-read-declare-vars" xreflabel="Declare Variables">
<title>Declare Variables</title>
<para>
<programlisting><![CDATA[char                                jobid[64];
globus_list_t                       *l, *events;
fake_job_info_t                     *info;
globus_reltime_t                    delay = {0};
time_t                              now;
unsigned long                       pending_time, active_time, done_time, failed_time;
globus_scheduler_event_t            *e;
time_t                              last_timestamp;
globus_result_t                     result = GLOBUS_SUCCESS;]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-read-check-for-shutdown" xreflabel="Check for Shutdown">
<title>Check for Shutdown</title>
<para>To check for shutdown, we'll first lock the mutex associated with the state
structure and check if the <structfield>shutdown_called</structfield> field
is set to true. If so, we'll jump to our error handling code.

<programlisting><![CDATA[globus_mutex_lock(&globus_l_fake_state.mutex);
if (globus_l_fake_state.shutdown_called)
{
    result = GLOBUS_FAILURE;
    goto error;
}]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-read-open-log" xreflabel="Open Log">
<title>Open Log</title>
<para>
In general, we'll keep a file open to parse the log, but the first time around,
or before any events have been written, the log file might not exist. So we'll
check to see if we have a <literal>NULL</literal> file pointer, and if so, try
to open the file. Once opened, we'll use line buffering while we process the file.

<programlisting><![CDATA[if (globus_l_fake_state.log == NULL)
{
    globus_l_fake_state.log = fopen(globus_l_fake_state.log_path, "r");
    if (globus_l_fake_state.log != NULL)
    {
        /* Enable line buffering */
        setvbuf(globus_l_fake_state.log, NULL, _IOLBF, 0);
    }
}
if (globus_l_fake_state.log == NULL)
{
    result = GLOBUS_FAILURE;
    GlobusTimeReltimeSet(delay, 30, 0);
    goto reregister;
}]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-read-read-log" xreflabel="Read Log">
<title>Read Log</title>
<para>
Now we will read all of the log entries from our current position until the end
of file. If we've already parsed an entry for a particular job, we will zero
out its timestamps and replace with the new timestamps to handle cancel events
in the fake job log.

<programlisting><![CDATA[
/* previous read might have hit EOF, so clear it before trying to read */
clearerr(globus_l_fake_state.log);

/* Read any new job info from the log */
while (fscanf(globus_l_fake_state.log, "%63[^;];%ld;%ld;%ld;%ld\n",
            jobid,
            &pending_time,
            &active_time,
            &done_time,
            &failed_time) == 5)
{
    l = globus_list_search_pred(globus_l_fake_state.jobs, globus_l_fake_find_by_job_id, jobid);
    if (l != NULL)
    {
        info = globus_list_first(l);
        /* If there's a second entry for the same job, it was cancelled, so
         * clear done/failed timestamps and copy them below
         */
        info->done = info->failed = 0;
    }
    else
    {
        /* First time we've seen this job, set jobid and insert*/
        info = malloc(sizeof(fake_job_info_t));
        *info = fake_job_info_initializer;
        strcpy(info->jobid, jobid);
        globus_list_insert(&globus_l_fake_state.jobs, info);
    }
    /* set timestamps */
    info->pending = pending_time;
    info->active = active_time;
    info->done = done_time;
    info->failed = failed_time;
}]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-read-create-events" xreflabel="Create Events">
<title>Create Events</title>
<para>
Now, we'll walk our list of jobs and create SEG events for each state transition
which has occurred since our last timestamp and the current time. These events
will be out of order in our events list, because they are created in order of
job IDs in the jobs list, and not in timestamp list. We'll deal with this later.
Note that we set the timestamp values in the job info to 0 after we create an event.
This keeps us from generating an event multiple times.

<programlisting><![CDATA[/* Create set of events that we'll emit this time through: jobs which will
 * changed state since our last event update
 */
now = time(NULL);

events = NULL;
for (l = globus_l_fake_state.jobs; l != NULL; l = globus_list_rest(l))
{
    info = globus_list_first(l);

    if (info->pending >= globus_l_fake_state.start_timestamp &&
        info->pending < now)
    {
        e = malloc(sizeof(globus_scheduler_event_t));
        e->event_type = GLOBUS_SCHEDULER_EVENT_PENDING;
        e->job_id = info->jobid;
        e->timestamp = info->pending;
        e->exit_code = 0;
        e->failure_code = 0;
        e->raw_event = NULL;

        info->pending = 0;

        globus_list_insert(&events, e);
    }
    if (info->active >= globus_l_fake_state.start_timestamp &&
        info->active < now)
    {
        e = malloc(sizeof(globus_scheduler_event_t));
        e->event_type = GLOBUS_SCHEDULER_EVENT_ACTIVE;
        e->job_id = info->jobid;
        e->timestamp = info->active;
        e->exit_code = 0;
        e->failure_code = 0;
        e->raw_event = NULL;

        info->active = 0;

        globus_list_insert(&events, e);
    }
    if (info->done != 0 &&
        info->done >= globus_l_fake_state.start_timestamp &&
        info->done < now)
    {
        e = malloc(sizeof(globus_scheduler_event_t));
        e->event_type = GLOBUS_SCHEDULER_EVENT_DONE;
        e->job_id = info->jobid;
        e->timestamp = info->done;
        e->exit_code = 0;
        e->failure_code = 0;
        e->raw_event = NULL;

        info->done = 0;

        globus_list_insert(&events, e);
    }
    if (info->failed != 0 &&
        info->failed >= globus_l_fake_state.start_timestamp &&
        info->failed < now)
    {
        e = malloc(sizeof(globus_scheduler_event_t));
        e->event_type = GLOBUS_SCHEDULER_EVENT_FAILED;
        e->job_id = info->jobid;
        e->timestamp = info->failed;
        e->exit_code = 0;
        e->failure_code = GLOBUS_GRAM_PROTOCOL_ERROR_USER_CANCELLED;
        e->raw_event = NULL;

        info->failed = 0;

        globus_list_insert(&events, e);
    }
}]]></programlisting>

</para>
</formalpara>

<formalpara id="gram5-lrm-seg-read-emit-events" xreflabel="Emit Events">
<title>Emit Events</title>
<para>
Now we have a set of events, we will sort them by timestamp and then use the
SEG API to emit them. After we've emitted an event, we have to free it. If the
event is a terminal one (DONE or FAILED) we'll remove the job from the list
of jobs in the state structure.

<programlisting><![CDATA[/* Sort the events so that they're in timestamp order */
events = globus_list_sort_destructive(events, globus_l_fake_compare_events, NULL);

/* Emit events in proper order */
while (! globus_list_empty(events))
{
    e = globus_list_remove(&events, events);
    last_timestamp = e->timestamp;

    switch (e->event_type)
    {
        case GLOBUS_SCHEDULER_EVENT_PENDING:
            globus_scheduler_event_pending(e->timestamp, e->job_id);
            break;
        case GLOBUS_SCHEDULER_EVENT_ACTIVE:
            globus_scheduler_event_active(e->timestamp, e->job_id);
            break;
        case GLOBUS_SCHEDULER_EVENT_FAILED:
            globus_scheduler_event_failed(e->timestamp, e->job_id, e->failure_code);
            break;
        case GLOBUS_SCHEDULER_EVENT_DONE:
            globus_scheduler_event_done(e->timestamp, e->job_id, e->exit_code);
            break;
    }
    /* If this is a terminal event, we can remove the job from the list */
    if (e->event_type == GLOBUS_SCHEDULER_EVENT_FAILED ||
        e->event_type == GLOBUS_SCHEDULER_EVENT_DONE)
    {
        l = globus_list_search_pred(globus_l_fake_state.jobs, globus_l_fake_find_by_job_id, e->job_id);
        info = globus_list_remove(&globus_l_fake_state.jobs, l);
        free(info);
    }

    free(e);
}
globus_l_fake_state.start_timestamp = last_timestamp;
]]></programlisting>
</para> 
</formalpara>

<formalpara id="gram5-lrm-seg-read-reregister" xreflabel="Reregister Callback">
<title>Reregister Callback</title>
<para>
We'll register a new callback instance now (provided we haven't had an error occur)
so that we can continue to process jobs later.

<programlisting><![CDATA[GlobusTimeReltimeSet(delay, 1, 0);
reregister:
result = globus_callback_register_oneshot(
        NULL,
        &delay,
        globus_l_fake_read_callback,
        &globus_l_fake_state);
if (result != GLOBUS_SUCCESS)
{
    goto error;
}
globus_mutex_unlock(&globus_l_fake_state.mutex);
return;
]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-read-error-handling" xreflabel="Error Handling">
<title>Error Handling</title>
<para>
If an error occurred registering the event or the shutdown handler is invoked,
we'll exit this function without registering a new event. In the case the 
shutdown handling is in place, we'll signal that as well

<programlisting><![CDATA[error:
if (globus_l_fake_state.shutdown_called)
{
    globus_l_fake_state.callback_count--;

    if (globus_l_fake_state.callback_count == 0)
    {
        globus_cond_signal(&globus_l_fake_state.cond);
    }
}
else
{
    fprintf(stderr,
            "FATAL: Unable to register callback. FAKE SEG exiting\n");
    exit(EXIT_FAILURE);
}
globus_mutex_unlock(&globus_l_fake_state.mutex);

return;

]]></programlisting>
</para>
</formalpara>
</section> <!-- Process Events -->

<section id="gram5-lrm-seg-module-utils" xreflabel="Utility Functions">
<title>Utility Functions</title>

<para>
We have two utility functions to implement for this module to manage our lists
of pending events and jobs.

<programlisting><xref linkend="gram5-lrm-seg-module-find-job" role="noindent"/>
<xref linkend="gram5-lrm-seg-module-compare-events" role="noindent"/></programlisting>
</para>

<formalpara id="gram5-lrm-seg-module-find-job" xreflabel="Find By Job ID">
<title>Find By Job ID</title>
<para>
The <function>globus_l_fake_find_by_job_id()</function> function is used to search
the <structfield>jobs</structfield> field of the state structure for a
<structname>fake_job_info_t</structname> containing info about a particular job. This
predicate returns a non-zero value if the <parameter>datum</parameter> passed to the function
has the same job ID as the <parameter>arg</parameter> parameter.

<programlisting><![CDATA[static
int
globus_l_fake_find_by_job_id(void * datum, void * arg)
{
    fake_job_info_t * info = datum;

    return (strcmp(info->jobid, arg) == 0);
} /* globus_l_fake_find_by_job_id() */]]></programlisting>
</para>
</formalpara>

<formalpara id="gram5-lrm-seg-module-compare-events" xreflabel="Sort Events">
<title>Sort Events</title>
<para>The <function>globus_l_fake_compare_events()</function> function is used as
a predicate to compare the timestamps and job ids of a pair of events. If the
<parameter>log_datum</parameter> points to an event which happens earlier in the
job lifecycle than the <parameter>high_datum</parameter>, this function returns
<literal>GLOBUS_TRUE</literal>; otherwise it returns <literal>GLOBUS_FALSE</literal>.

<programlisting><![CDATA[static
int
globus_l_fake_compare_events(void * low_datum, void * high_datum, void * relation_args)
{
    globus_scheduler_event_t *low_event = low_datum, *high_event = high_datum;

    if (low_event->timestamp < high_event->timestamp)
    {
        return GLOBUS_TRUE;
    }
    else if (low_event->timestamp == high_event->timestamp)
    {
        if (low_event->event_type == GLOBUS_SCHEDULER_EVENT_PENDING)
        {
            return GLOBUS_TRUE;
        }
        else if (low_event->event_type == GLOBUS_SCHEDULER_EVENT_ACTIVE &&
                 high_event->event_type != GLOBUS_SCHEDULER_EVENT_PENDING)
        {
            return GLOBUS_TRUE;
        }
        else if (high_event->event_type != GLOBUS_SCHEDULER_EVENT_PENDING &&
                 high_event->event_type != GLOBUS_SCHEDULER_EVENT_ACTIVE)
        {
            return GLOBUS_TRUE;
        }
    }
    return GLOBUS_FALSE;
} /* globus_l_fake_compare_events() */]]></programlisting>

</para>
</formalpara>
</section> <!-- Utility Functions -->
</section> <!-- LRM SEG Module -->
