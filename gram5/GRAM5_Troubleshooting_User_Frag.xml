<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!ENTITY % xinclude SYSTEM "../xinclude.mod">
%xinclude;
<!ENTITY prompt "<prompt>&#37; </prompt>" >
]>

<section id="gram5-troubleshooting-client"><title>GRAM Client Troubleshooting</title>
    <indexterm type="gram5"><primary>troubleshooting</primary></indexterm>
    <indexterm type="gram5"><primary>troubleshooting</primary><secondary>errors</secondary></indexterm>

    <section><title>Credential Problems</title>
        <para>
        GRAM requires a client certificate and private key in order
        authenticate with the GRAM service. If these are not available, the
        GRAM client will fail. In typical use, a user will create a temporary
        proxy certificate either derived from their identity certificate issued
        by some certificate authority, or from a service such as myproxy. If a
        GRAM client command returns any error containing the string
        <literal>GSS Major Status</literal> you've hit a credential problem.
        Look at the <olink targetdoc="gsicUser"
        targetptr="security-credential-errors">Troubleshooting Section</olink>
        of the GSI manual for details about how to diagnose and correct these
        errors. The <command><olink targetdoc="gsicUser"
        targetptr="grid-cert-diagnostics">grid-cert-diagnostics</olink></command> tool
        with the <option>-p</option> command-line option is especially helpful
        for diagnosing some of these types of problems.
        </para>
    </section> <!--Credential Problems-->

    <section><title>Connection Problems</title>
    <para>
    There are a few things which can go wrong when trying to contact a GRAM
    service. These have slightly different error types which can help diagnose
    which problem is occurring.
    </para>
    
    <section>
    <title>Invalid Resource Name</title>
    <para>If the hostname or TCP port you are using for a GRAM
    resource name is not correct, then the GRAM client will be
    unable to access the service. Errors of this type will look
    like this:

    <screen>&prompt;<command>globus-job-run grid.example.org/jobmanager-fork /bin/hostname</command>
<computeroutput>
GRAM Job submission failed because the connection to the server failed (check host and port) (error code 12)</computeroutput>
    </screen>

    When this occurs, check with the resource administrator for
    correct resource naming so that you can contact the
    service.
    </para>
    </section> <!-- Invalid Resource Name -->

    <section>
    <title>Mutual Authentication Failure</title>
    <para>
    GRAM performs mutual authentication, that is, both the client and service
    provide certificates indicating who they are. The service uses the client's
    identity to map the user to a local unix account. The client uses the
    server's identity to verify that the service is running with a host
    credential. The failure of the client to trust the server's certificate
    will generate an error message that looks like this:

    <computeroutput>globus_gsi_gssapi: Authorization denied: The expected name for the remote host (host@alias.example.org) does not match the authenticated name of the remote host (host@grid.example.org). This happens when the name in the host certificate does not match the information obtained from DNS and is often a DNS configuration problem.</computeroutput>
    </para>

    <para>
    This mismatch can happen for a number of reasons: a site administrator has
    multiple hosts sharing a certificate, a host has multiple DNS aliases, and
    the client is not aware of which name the server is using for its
    certificate, or a host's name has changed since the certificate was issued.
    The remedy for the client, after confirming with the GRAM administrator
    that the name after "authenticated name of the remote host" is the correct
    certificate name is to use a form of the GRAM resource name which includes
    this name. For example, explicitly adding a name to the abbreviated GRAM 
    contact so that instead of <literal>alias.example.org</literal>, you would
    use <literal>alias.example.org::host@grid.example.org</literal>.
    </para>
    </section> <!-- Mutual Authentication Failure -->

    <section>
    <title>Certificate Trust Issues</title>
    <para>
    Because of the mutual authentication, both GRAM users and services can hit
    problems if they do not trust their peer's certificate or the Certificate
    Authority which issued it. If the client doesn't trust the server's
    certificate, it is easier to diagnose, because the GRAM service doesn't
    send much information back to the client if it doesn't trust it. However,
    working with the system administrator to get information from the GRAM
    logs will usually fix these problems fairly easily.
    </para>

    <para>
    If the service's certificate is not trusted, the client will receive a
    message like this:

    <screen>&prompt; <command>globus-job-run grid.example.org /bin/hostname</command>
<computeroutput>GRAM Job submission failed because an authentication operation failed
OpenSSL Error: s3_clnt.c:915: in library: SSL routines, function SSL3_GET_SERVER_CERTIFICATE: certificate verify failed
globus_gsi_callback_module: Could not verify credential
globus_gsi_callback_module: Can't get the local trusted CA certificate: Untrusted self-signed certificate in chain with hash bbfccedf</computeroutput></screen>
    </para>

    <para>This error indicates that certificate chain from the service
    certificate to the client contained a self-signed certificate (usually an
    indication that it's a CA certificate), which the client doesn't trust, and
    includes the hash of the certificate name (<literal>bbfccedf</literal> in
    this case). If you hit this particular type
    of error, you should send the information to the GRAM administrator and
    determine which CA should be trusted and what its signing policy is, to
    determine if you want to add it to your local set of trust roots.
    </para>

    <note>
    <para>
    Different versions of OpenSSL produce different hashes for the same
    certificate names. If you upgrade a system (or transfer CA certificates
    between systems) to a different version of OpenSSL, you may hit this
    problem even if you think you have the CA certificate in your trusted
    certificate directory. If so, run the
    <command>globus-update-certificate-dir</command> program to update your
    hashes.
    </para>
    </note>

    <para>
    There are other reasons why a certificate might not be trusted (it's in a
    revoked list, it has expired or was issued in the future, etc). For more details look at the 
    <olink targetdoc="gsicUser"
    targetptr="gsic-user-troubleshooting">troubleshooting information</olink>
    in the GSI user's guide.
    </para>

    <para>
    If for some reason the service does not trust your certificate, you'll get
    a rather cryptic message from GRAM that looks like this:
    <screen>&prompt;<command>globus-job-run grid.example.org /bin/hostname</command>
<computeroutput>GRAM Job submission failed because an authentication operation failed
globus_gsi_gssapi: Unable to verify remote side's credentials
globus_gsi_gssapi: Unable to verify remote side's credentials: Couldn't verify the remote certificate
OpenSSL Error: s3_pkt.c:1086: in library: SSL routines, function SSL3_READ_BYTES: sslv3 alert bad certificate SSL alert number 42
 (error code 7)</computeroutput></screen>
    </para>

    <para>
    To remedy this, consult the GRAM administrator to get information from the
    <filename>/var/log/globus-gatekeeper.log</filename> file to determine the
    reason why the gatekeeper didn't like your certificate. Again it could be
    CA trust issues, clock skew, or a revoked certificate. The error in the 
    gatekeeper log would typically look like the client-side trust issue above.
    </para>
    </section> <!-- CA Trust Issues -->

    <section>
    <title>Authentication with the Remote Server Failed</title>
    <para>
    Once the GRAM service has authenticated the client, it maps the client's identity
    to a local user account using a grid-mapfile or other mapping service. If this fails,
    the client will receive a message that looks like this:

    <screen>&prompt;<command>globus-job-run grid.example.org /bin/hostname</command>
<computeroutput>GRAM Job submission failed because authentication with the remote server failed (error code 7)</computeroutput></screen>
    </para>

    <para>
    To remedy this, consult the system administrator of the GRAM resource to be added to
    the authorized user's list. Be sure to send your credential subject name to make it
    easier for them. To get that information, run the command <command>grid-cert-info -s</command>.
    </para>
    </section> <!-- Authentication with the Remote Server Failed -->

    <section>
    <title>Unable to Find the Requested Service</title>

    <para>
    Recall that a GRAM resource name includes a component called the
    <literal>service name</literal>. The default if not specified is
    <literal>jobmanager</literal>, but some sites may not use that
    name, or have a different LRM name than you expect. If you specify
    an incorrect service name, or the default is not present, you'll get
    an error that looks like this:

    <screen>&prompt;<command>globus-job-run grid.example.org /bin/hostname</command>
<computeroutput>GRAM Job submission failed because the gatekeeper failed to find the requested service (error code 93)</computeroutput></screen>
    </para>

    <para>
    If you get this error, you'll need to determine which services are
    available on that GRAM resource, either by asking the admin or by looking
    at the entries in <filename>/etc/grid-services</filename>
    </para>
    </section> <!-- Unable to Find the Requested Service -->

    <section>
    <title>Failed to Run the Job Manager</title>

    <para>
    The GRAM service is split between a priveleged process called the
    <filename>globus-gatekeeper</filename> and a non-privileged process called
    the <filename>globus-job-manager</filename> which runs as a user process. If the
    <filename>globus-gatekeeper</filename> is unable to locate the
    <filename>globus-job-manager</filename> process, then this misconfiguration will 
    show up like this:
    <screen>&prompt;<command>globus-job-run grid.example.org /bin/hostname</command>
<computeroutput>GRAM Job submission failed because the gatekeeper failed to run the job manager (error code 47)</computeroutput></screen>
    </para>

    <para>
    This is an installation mistake, and the administrator of the GRAM resource must fix this.
    </para>
    </section> <!-- Failed to Run the Job Manger -->
    </section> <!-- Connection Problems -->

    <section><title>Jobs are Hanging</title>
    <para>
    One problem GRAM users sometimes encounter is that it looks like jobs
    submitted to GRAM are not making any progress, even though the local
    resource manager thinks they've run. There are a couple of reasons why this
    might occur: GRAM is not getting the information it needs from the local
    resource manager or the GRAM client is not getting the information it
    needs. We'll cover diagnosing and handling the latter case in this
    document, as the other is an system administrator issue.
    </para>

    <para>
    The way <command>globus-job-run</command> and <command>globusrun</command>
    determine that jobs have completed is via GRAM job state callbacks. These are
    messages sent by the GRAM service to the client node indicating that something
    significant has happened in the lifecycle of the job. If for some reason the
    GRAM service can not get those messages to the client, the client will not
    be able to detect job state changes.
    </para>

    <para>
    In order to determine if this is the case, submit a job using
    <command>globus-job-submit</command>, and then use the
    <command>globus-job-status</command> command to see if the job state
    changes. If it does not, then consult the GRAM administrator---there might be
    some problem with the installation. If it does, then for some reason the
    callbacks are not happening. This might be firewall issues or host naming issues.
    </para>

    <para>
    The GRAM client sends a "callback contact" to the GRAM service when it submits 
    a job, in order that it can receive notifications. This contact is a reference
    to a https server embedded in the GRAM client which only handles GRAM state
    callbacks. As with all web servers, it has a URL which defines how to contact it,
    which in this case consists of the client host name and the service port number.
    If the host name that is used is not resolvable (such as a for a laptop with a 
    dynamic address), then the GRAM service will not be able to contact it. If
    that's the case, you can set the <envar>GLOBUS_HOSTNAME </envar>
    environment variable to the IP address that your client can be reached at, and 
    then submit your jobs. This will cause GRAM to publish that address instead of
    what it thinks the client's host name is.
    </para>

    <para>
    Another way that the GRAM service would be unable to send job state updates to
    a client would be if there's a firewall between the service and the client.
    If that's the case, you might need to set the <envar>GLOBUS_TCP_PORT_RANGE</envar>
    environment variable to a comma-separated list of numbers which represent a range of 
    minimum and maximum TCP port numbers to listen on. You might have to contact
    your site administrator to determine what TCP ports are allowed. If there are none,
    you can still use <command>globus-job-submit</command> and
    <command>globus-job-status</command> to track your job's state changes, or
    use another tool like those mentioned in the <olink
    targetdoc="gram5User" targetptr="gram5-user-client-tools">section about client tools</olink>.
    </para>

    </section> <!-- Jobs are Hanging -->

    <section>
    <title>Logs and Debugging</title>
    <para>
    The GRAM service has a log file which contains information about the job as
    it is processed. These logs are located by default in
    <filename>/var/log/globus/gram_<replaceable>$USERNAME</replaceable>.log</filename>.
    There are some different logging levels available, as
    <olink targetdoc="gram5Admin" targetptr="gram5-log-levels">described in 
    the GRAM Adminstrator's Guide</olink>. These can be controlled on a per-job
    basis by adding the <literal>loglevel</literal> RSL attribute to your job
    description. The default is to log only <literal>FATAL</literal> and
    <literal>ERROR</literal> messages, but other levels can sometimes help
    understand what is going on.
    </para>

    </section> <!-- Logs and Debugging -->

    <section>
    <title>Diagnosing LRM Errors</title>
    <para>
    Sometimes, bugs creep into the LRM adapter scripts. When that occurs, the GRAM job will
    usually fail with an error like this: 
    <screen><computeroutput>GRAM Job failed because the job manager detected an invalid script status (error
code 25)</computeroutput></screen>
    </para>
    <para>If this occurs, you may have to work with a GRAM administrator to
    help debug this problem. One helpful thing you can do when reporting it is
    to save the GRAM internal script data so that it can be used outside of the
    GRAM service to see what the low-level error looks like. To do this, add the
    RSL fragment <literal>(savejobdescription = yes)</literal> to your job
    request. This will cause GRAM to leave a file called something like
    <filename>$HOME/gram_[0-9]*.pl</filename> in your home directory. You can use this with
    the internal tool <filename>/usr/share/globus/globus-job-manager-script.pl</filename> to
    try to submit the job to the LRM without using the GRAM service. The command line
    <command>/usr/share/globus/globus-job-manager-script.pl -m <replaceable>LRM</replaceable> -c submit -f <replaceable>GRAM-PL-FILE</replaceable></command> will attempt to submit the job to the LRM. It will show all the information the LRM
    script sends to the GRAM service, which might include some perl-language error or badly formatted output from the script (which must only output lines which begin with <literal>GRAM_SCRIPT_</literal>.
    </para>

    <para>
    In some extreme cases, the savejobdescription option will not generate a
    file. If that's the case, pass <filename>/dev/null</filename> as the argument
    to the <option>-f</option> command-line option. The problem is likely a
    perl syntax error which will be reached before the job description is loaded.
    </para>
    </section> <!-- Diagnosing LRM Errors -->

    <section>
    <title>Email Support</title>
    <para>
    If all else fails, please send information about your problem to <email>gram-user@globus.org</email>.
    You'll have to subscribe to a list before you can send an e-mail to it.
    See <ulink url="http://dev.globus.org/wiki/Mailing_Lists">here</ulink> for
    general e-mail lists and information on how to subscribe to a list and
    <ulink url="http://dev.globus.org/wiki/GRAM#Mailing_Lists">here</ulink>
    for GRAM specific lists. Depending on the problem, you may be requested to file a bug report to
    the globus project's <ulink url="https://globus.atlassian.net">Issue Tracker</ulink>.
    </para>

    </section>
    
</section> <!--Client Troubleshooting-->
