<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook EBNF Module V1.2CR1//EN"
                    "http://www.oasis-open.org/docbook/xml/ebnf/1.2CR1/dbebnf.dtd" 
[
<!ENTITY GRAM "GRAM5" >
<!ENTITY % xinclude SYSTEM "../xinclude.mod">

%xinclude;

]>

<chapter id="gram5-rvf">
<title>RSL Validation File Specification</title>

    <para>This is a document to specify the file format and semantics of the
    RSL validation files (<emphasis>RVF</emphasis>) used by &GRAM;
    to validate an <glossterm>Resource Specification Language</glossterm> job
    description document in various contexts. This validations ensures that the
    RSL attribute used in the document are understood by &GRAM;, fills in
    any default values for missing RSL attributes, and also matches the
    type of the RSL value with that of the attribute to ensure it is
    valid.</para>

    <section id="gram5-rvf-syntax">
    <title>RVF Syntax Overview</title>

    <para>
    The core syntax of the RSL syntax is the <emphasis>attribute
    definition record</emphasis>. Each RSL attribute definition record can
    define one or more aspects of the attribute, and all but the
    <emphasis>Attribute</emphasis> aspect are optional. 
    </para>

    <section id="gram5-rvf-definition">
    <title>Attribute Definition Record Syntax</title>

    <para>
    Syntactically, the attribute definition record consists of a series of
    line-oriented attribute aspect definitions, with records separated by
    a blank line. Additionally, comment strings may begin a line when
    the first non-whitespace character in the line is <literal>#</literal>.
    </para>

    <section><title>Aspect Name</title>
    <para>The aspect name syntax is an aspect name token, which may
    be any character other than the <literal>:</literal> character, then
    its value, which may be either a <emphasis>Simple String</emphasis> or a
    <emphasis>Quoted String</emphasis>. When parsed, the Aspect Name is
    transformed into a lowercase string.
    </para>
    </section> <!-- Aspect Name -->

    <section><title>Simple String</title>
    <para>The parser detects a Simple String by scanning the first
    non-whitespace character after the <literal>:</literal> character and
    seeing it is not <literal>"</literal>. A Simple String's value is parsed
    from the first non-whitespace character until the end of line character.
    Thus, in a record, the line
    <programlisting>Attribute: executable</programlisting>
    will parse the aspect name as <literal>Attribute</literal> and the
    simple string value as <literal>executable</literal> without any leading
    whitespace. There is no way to indicate an empty value with a simple
    string.
    </para>
    </section> <!-- Simple String -->

    <section><title>Quoted String</title>
    <para>The parser detects a Quoted String by scanning the first
    non-whitespace character after the <literal>:</literal> character
    and seeing it is <literal>"</literal>. A Quoted String's value is
    parsed from the <literal>"</literal> character to the next 
    <literal>"</literal> not preceded by the <literal>\</literal> character.
    Thus, a Quoted String may contain an empty value, or span multiple lines.
    </para>
    <para>
    Thus, the aspect definition
    <programlisting>Description: "The value of the \"Quoted String\"
    It may span multiple lines"</programlisting>
    will yield an aspect named <emphasis>Description</emphasis> with the
    value <programlisting>The value of the "Quoted String"
    It may span multiple lines</programlisting>
    </para>
    </section> <!-- Quoted String -->

    <section><title>Record Delimiter</title>
    <para>Records are separated by blank lines which are not parts of Quoted
    String values. The rvf sequence

    <programlisting>Name: record-1
Aspect_1: with an aspect

Name: some other simple value
Aspect_1: with the same aspect
    </programlisting>
    will yield two records, each with two aspects: <literal>Name</literal>
    and <literal>Aspect_1</literal>.
    </para>
    </section> <!-- Record Delimiter -->
    </section> <!-- Attribute Definition Record Syntax -->

    <section>
    <title>Aspects used by &GRAM;</title>
    <para>
    The &GRAM; RVF parser supports the following set of attributes in record
    definitions.

    <variablelist>
        <varlistentry>
        <term>Attribute</term>
        <listitem><simpara>The only <emphasis>required</emphasis> aspect
        in a record, the <literal>Attribute</literal> aspect defines the
        name of the RSL attribute which the record refers to. The name
        is canonicalized to lowercase, with underscore characters
        removed.</simpara>
        </listitem>
        </varlistentry>

        <varlistentry>
        <term>Description</term>
        <listitem><simpara>A description of the RSL attribute. This can
        be used to generate RSL documentation (see rsl.5), but is not
        otherwised used by &GRAM;.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>RequiredWhen</term>
        <listitem><simpara>A list indicating when the attribute is 
        <emphasis>required</emphasis> to be included in the RSL document.
        If it is not present, and the RVF does not include a default value
        for it, the RSL will be rejected. See
        <olink targetptr="gram5-rvf-when"/> for a list of valid values for this
        aspect.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>DefaultWhen</term>
        <listitem><simpara>A list indicating when the attribute's default
        value will be provided when not in the RSL. The default value is
        defined by the <literal>Default</literal> aspect described below. See
        <olink targetptr="gram5-rvf-when"/> for a list of valid values for this
        aspect.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>ValidWhen</term>
        <listitem><simpara>A list indicating when the attribute is valid
        in an RSL document. If the RSL attribute is included in a document
        which is not being used for the purpose described by this aspect's
        value, it will be rejected. See
        <olink targetptr="gram5-rvf-when"/> for a list of valid values for this
        aspect.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>Default</term>
        <listitem><simpara>A default value for the RSL attribute if it's used
        in a context which matches the <literal>DefaultWhen</literal> aspect
        for this attribute's record. The value of this attribute must parsable
        into be a valid RSL <olink targetdoc="gram5PI" targetptr="gram5-rsl.value-sequence">value-sequence</olink>.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>Values</term>
        <listitem><simpara>An enumeration of values for the RSL attribute.
        The value must be simple single-word strings (such as
        <literal>yes no</literal>. RSL documents which include the attribute
        this record is for and do not match one of the single-word values
        will be rejected by the RSL validator.</simpara></listitem>
        </varlistentry>

        <varlistentry>
        <term>Publish</term>
        <listitem><simpara>A flag, which if it equals <literal>true</literal>,
        will cause the RSL attribute to be included in the documentation
        produced by the <application>create_rsl_documentation.pl</application>
        program. This is generally only useful for core RSL attributes 
        included in &GRAM;</simpara></listitem>
        </varlistentry>
    </variablelist>
    </para>

    <section id="gram5-rvf-when">
    <title>RVF When Values</title>
    <para>
    Several RVF aspect values are defined to include a list of contexts when
    the RVF record is valid, required, or should be assigned a default value.
    The list of contexts may include any number of the following strings,
    separated by whitespace:

    <variablelist>
        <varlistentry>
            <term>GLOBUS_GRAM_JOB_SUBMIT</term>
            <listitem><simpara>The aspect relates to initial job submission
            RSL documents.</simpara></listitem>
        </varlistentry>

        <varlistentry>
            <term>GLOBUS_GRAM_JOB_MANAGER_RESTART</term>
            <listitem><simpara>The aspect relates to &GRAM; restart RSL 
            documents.</simpara></listitem>
        </varlistentry>
        <varlistentry>
            <term>GLOBUS_GRAM_JOB_MANAGER_STDIO_UPDATE</term>
            <listitem><simpara>The aspect relates to a STDIO_UPDATE
            signal.</simpara></listitem>
        </varlistentry>
    </variablelist>
    </para>
    <para>
    For example, the following RVF record will be valid for all three contexts,
    and will provide a default value <literal>/dev/null</literal> for the
    <literal>GLOBUS_GRAM_JOB_SUBMIT</literal> context but not the other
    contexts:

    <programlisting>Attribute: stdout
Description: "The name of the remote file to store the standard output from
              the job. If the value is a GASS URL, the standard output from
              the job is transferred dynamically during the execution of the
              job. There are two accepted forms of this value. It can consist
              of a single destination: stdout = URL, or a sequence of
              destinations: stdout = (DESTINATION) (DESTINATION). In the latter
              case, the DESTINATION may itself be a URL or a sequence of an
              x-gass-cache URL followed by a cache tag."
Default: "/dev/null"
ValidWhen: GLOBUS_GRAM_JOB_SUBMIT GLOBUS_GRAM_JOB_MANAGER_RESTART GLOBUS_GRAM_JO
B_MANAGER_STDIO_UPDATE
DefaultWhen: GLOBUS_GRAM_JOB_SUBMIT</programlisting>
    </para>
    </section> <!-- RVF When Values -->
    </section> <!-- Aspects used by &GRAM; -->

    <section id="gram5-rvf-merging">
    <title>RVF Merging</title>
    <para>
    &GRAM; will look in multiple locations for RVF records, allowing for the
    default core set of RSL attributes to be modified on a per-LRM case,
    as well as on a site-specific basis. The RVF parser looks in the following
    locations for RVF records in sequential order:

    <variablelist>
        <varlistentry>
            <term>/usr/share/globus/globus_gram_job_manager/globus-gram-job-manager.rvf</term>
            <listitem><simpara>Core RVF definitions which apply to all
            LRM implementations.</simpara></listitem>
        </varlistentry>
        <varlistentry>
            <term>/usr/share/globus/globus_gram_job_manager/<replaceable>$LRM</replaceable>.rvf</term>
            <listitem><simpara>RVF definitions which apply to a particular
            LRM implementation.</simpara></listitem>
        </varlistentry>
        <varlistentry>
            <term>/etc/globus/gram/job-manager.rvf</term>
            <listitem><simpara>Site-specific RVF definitions which apply to
            all LRM implementations.</simpara></listitem>
        </varlistentry>
        <varlistentry>
            <term>/etc/globus/gram/<replaceable>$LRM</replaceable>.rvf</term>
            <listitem><simpara>Site-specific RVF definitions which apply to
            a particular LRM.</simpara></listitem>
        </varlistentry>
    </variablelist>

    All but the core RVF file are optional.
    </para>

    <para>
    When processing multiple RVF files, &GRAM; will perform a merge with
    override of RVF aspects for each record based on the record's
    <literal>Attribute</literal> aspect. Thus, each subsequent record for
    a particular RSL attribute will replace the value of those aspects which
    are included in the new record, leaving aspects which are not mentioned
    in the new RVF record unchanged. To remove an aspect defined in a
    previous RVF record, include the aspect with an empty Quoted Value. 
    LRM-specific and site RVF files can also define records for new
    RSL attributes.
    </para>

    <para>For example, if the core RVF records contain the following record:
    <programlisting>Attribute: directory
Description: "Specifies the path of the directory the jobmanager will use as
              the default directory for the requested job."
Default: $(HOME)
ValidWhen: GLOBUS_GRAM_JOB_SUBMIT
DefaultWhen: GLOBUS_GRAM_JOB_SUBMIT</programlisting>

    a site-specific RVF entry could replace the default value by including
    an RVF record like this:

    <programlisting>Attribute: directory
Default: /scratch/ # $(LOGNAME)</programlisting>
    </para>

    <para>Similarly, a LRM which does not support memory-related resource
    limits could add this record to an LRM-specific RVF file to disable
    those RSL attributes for that LRM:

    <programlisting>Attribute: min_memory
ValidWhen: ""

Attribute: max_memory
ValidWhen: ""</programlisting>
    </para>
    </section> <!-- RVF Merging -->

    <section>
    <title>Grammar Definition</title>
    <productionset id="gram5-rvf-grammar">
    <title>Grammar for RVF</title>

        <production id="gram5-rvf.records">
            <lhs>records</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.record">record</nonterminal>
                <nonterminal def="#gram5-rvf.record_separator">record_separator</nonterminal>
                <nonterminal def="#gram5-rvf.records">records</nonterminal>
                <sbr/>
                |
                <nonterminal def="#gram5-rvf.record">record</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.record">
            <lhs>record</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.aspect_list">aspect_list</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.aspect_list">
            <lhs>aspect_list</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.aspect">aspect</nonterminal>
                <nonterminal def="#gram5-rvf.aspect_list">aspect_list</nonterminal>
                <sbr/>
                <nonterminal def="#gram5-rvf.aspect">aspect</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.aspect">
            <lhs>aspect</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.comment">comment</nonterminal>*
                <nonterminal def="#gram5-rvf.aspect_name">aspect_name</nonterminal>
                <nonterminal def="#gram5-rvf.aspect_delimiter">aspect_delimiter</nonterminal>
                <nonterminal def="#gram5-rvf.aspect_value">aspect_value</nonterminal>
                <nonterminal def="#gram5-rvf.aspect_separator">aspect_separator</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.aspect_name">
            <lhs>aspect_name</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.whitespace">whitespace</nonterminal>*
                ("Attribute" | "Default" | "DefaultWhen" | "Description" |
                "Publish" | "RequiredWhen" | "ValidWhen")
            </rhs>
        </production>

        <production id="gram5-rvf.aspect_delimiter">
            <lhs>aspect_delimiter</lhs>
            <rhs>
                ":" <nonterminal def="#gram5-rvf.whitespace">whitespace</nonterminal>*
            </rhs>
        </production>

        <production id="gram5-rvf.aspect_value">
            <lhs>aspect_value</lhs>
            <rhs>
                """ <nonterminal def="#gram5-rvf.quoted_value">quoted_value</nonterminal> """
                <sbr/>
                |
                <nonterminal def="#gram5-rvf.quoted_value">unquoted_value</nonterminal> <nonterminal def="#gram5-rvf.whitespace">whitespace</nonterminal>

            </rhs>
        </production>

        <production id="gram5-rvf.quoted_value">
            <lhs>quoted_value</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.when_value_list">when_value_list</nonterminal>
                <sbr/>
                | <nonterminal def="#gram5-rvf.bool_value">bool_value</nonterminal>
                <sbr/>
                | <nonterminal def="#gram5-rvf.quoted_text">quoted_text</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.unquoted_value">
            <lhs>unquoted_value</lhs>
            <rhs>
                <nonterminal def="#gram5-rvf.when_value_list">when_value_list</nonterminal>
                <sbr/>
                | <nonterminal def="#gram5-rvf.bool_value">bool_value</nonterminal>
                <sbr/>
                <nonterminal def="#gram5-rvf.bool_value">unquoted_text</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.when_value_list">
            <lhs>when_value_list</lhs>
            <rhs>
                <nonterminal def="gram5-rvf.when_value_list">when_value_list</nonterminal> <nonterminal def="gram5-rvf.whitespace">whitespace</nonterminal> <nonterminal def="gram5-rvf.when_value">when_value</nonterminal>
                <sbr/>
                | <nonterminal def="gram5-rvf.when_value">when_value</nonterminal>
            </rhs>
        </production>
        <production id="gram5-rvf.when_value">
            <lhs>when_value</lhs>
            <rhs>
                "GLOBUS_GRAM_JOB_SUBMIT" |
                "GLOBUS_GRAM_JOB_MANAGER_RESTART" |
                "GLOBUS_GRAM_JOB_MANAGER_STDIO_UPDATE"
            </rhs>
        </production>

        <production id="gram5-rvf.bool_value">
            <lhs>bool_value</lhs>
            <rhs>"True" | "False"</rhs>
        </production>

        <production id="gram5-rvf.quoted_text">
            <lhs>quoted_text</lhs>
            <rhs>
                (("\"/[^"]) | ([^\"]) | (|"\""))*
                <lineannotation>Quoted text consists of \ followed by a
                non-quote character, a non-backslash or non-quote character, or
                a backslash followed by a quote. In the final case, the
                backslash is discarded by the parser.</lineannotation>
            </rhs>
        </production>

        <production id="gram5-rvf.unquoted_text">
            <lhs>unquoted_text</lhs>
            <rhs>
                [^ \t\r\n]*
                <lineannotation>Unquoted text value extends until the last
                non-whitespace character on the line</lineannotation>
            </rhs>
        </production>

        <production id="gram5-rvf.comment">
            <lhs>comment</lhs>
            <rhs>
                WHITESPACE* "#" [^\n] <nonterminal def="gram5-rvf.newline">newline</nonterminal>
                <lineannotation>Comment strings begin with <literal>#</literal>
                and extend until the end of the current line.</lineannotation>
            </rhs>
        </production>

        <production id="gram5-rvf.whitespace">
            <lhs>whitespace</lhs>
            <rhs>
                [ \t\r]
            </rhs>
        </production>

        <production id="gram5-rvf.record_separator">
            <lhs>record_separator</lhs>
            <rhs>
                <nonterminal def="gram5-rvf.newline">newline</nonterminal>
                (<nonterminal def="gram5-rvf.comment">comment</nonterminal> |
                <nonterminal def="gram5-rvf.newline">newline</nonterminal>)*

            </rhs>
        </production>

        <production id="gram5-rvf.aspect_separator">
            <lhs>aspect_separator</lhs>
            <rhs>
                <nonterminal def="gram5-rvf.newline">newline</nonterminal>
            </rhs>
        </production>

        <production id="gram5-rvf.newline">
            <lhs>newline</lhs>
            <rhs>"\n"</rhs>
        </production>

    </productionset>
    </section>
    </section>
</chapter>
