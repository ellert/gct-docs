<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="gram5-extensions">
  <title>Job Description Extensions Support</title>
  <indexterm type="gram5"><primary>job description extensions</primary></indexterm>
  <para> The GRAM5 job description schema includes a section for extending the job description with
    custom elements. To make sense of this in the resource manager adapter Perl scripts, a Perl
    module named <computeroutput>Globus::GRAM::ExtensionsHandler</computeroutput> is provided to
    turn these custom elements into parameters that the adapter scripts can understand. </para>
  <note>
    <para> Although only non-GRAM XML elements are allowed in the <computeroutput
      >&lt;extensions&gt;</computeroutput> element of the job description, the extensions handler
      makes no distinction based on namespace. Thus, <computeroutput
      >&lt;foo:myparam&gt;</computeroutput> and <computeroutput>&lt;bar:myparam&gt;</computeroutput>
      will both be treated as just <computeroutput>&lt;myparam&gt;</computeroutput>. </para>
  </note>
  <para> Familiarity with the adapter scripts is assumed in the following sub-sections. </para>
  <section id="gram5-extensions-requirements">
    <title>Requirements for Extensions Support</title>
    <para>
      <itemizedlist>
        <!-- cris: can we link to info about this? -->
        <listitem>
          <para>XML::Parser Perl module</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <section id="gram5-extensions-constructs">
    <title>Supported Extension Constructs</title>
    <section id="gram5-extensions-constructs-simple">
      <title>Simple String Parameters</title>
      <para> Simple string extension elements are converted into single-element arrays with the name
        of the unqualified tag name of the extension element as the array's key name in the Perl job
        description hash. Simple string extension elements can be considered a special case of the
        string array construct in the next section. </para>
      <para> For example, adding the following element to the <computeroutput
        >&lt;extensions&gt;</computeroutput> element of the job description as follows: </para>
      <screen>
    &lt;extensions&gt;
        &lt;myparam&gt;yahoo!&lt;/myparam&gt;
    &lt;/extensions&gt;
</screen>
      <para> will cause the <computeroutput>$description->myparam()</computeroutput> to return the
        following value: </para>
      <screen>
    'yahoo!'
</screen>
    </section>
    <section id="gram5-extensions-constructs-array">
      <title>String Array Parameters</title>
      <para> String arrays are a simple iteration of the simple string element construct. If you
        specify more than one simple string element in the job description, these will be assembled
        into a multi-element array with the unqualified tag name of the extension elements as the
        array's key name in the Perl job description hash. </para>
      <para> For example: </para>
      <screen>
&lt;extensions&gt;
  &lt;myparams&gt;Hello&lt;/myparams&gt;
  &lt;myparams&gt;World!&lt;/myparams&gt;
&lt;/extensions&gt;
</screen>
      <para> will cause the <computeroutput>$description->myparams()</computeroutput> to return the
        following value: </para>
      <screen>
[ 'Hello', 'World!' ]
</screen>
    </section>
    <section id="gram5-extensions-constructs-namevalue">
      <title>Name/Value Parameters</title>
      <para> Name/value extension elements can be thought of as string arrays with an XML attribute
        'name'. This will cause the creation of a two-dimensional array with the unqualified
        extension element tag name as the name of the array in the Perl job description hash. </para>
      <para> For example: </para>
      <screen>
&lt;extensions&gt;
  &lt;myvars name="pi"&gt;3.14159&lt;/myvars&gt;
  &lt;myvars name="mole"&gt;6.022 x 10^23&lt;/myvars&gt;
&lt;/extensions&gt;
</screen>
      <para> will cause the <computeroutput>$description->myvars()</computeroutput> to return the
        following value: </para>
      <screen>
        [ [ 'pi', '3.14159'], ['mole', '6.022 x 10^23'] ]
</screen>
    </section>
    <section id="gram5-extensions-constructs-nodes">
      <title>PBS Node Selection Parameters</title>
      <para> Node selection constraints in PBS can be specified in one of the following ways:</para>
      <itemizedlist>
        <listitem>
          <para>generally, using a construct intended to eventually apply to all resource managers
            which support node selection</para>
        </listitem>
        <listitem>
          <para>explicitly. by specifying a simple string element.</para>
        </listitem>
      </itemizedlist>
      <para>The former will be more portable, but the latter will appeal to those familiar with
        specifying node constraints for PBS jobs. </para>
      <para>To specify PBS node selection constraints explicitly, one can simply constuct a single,
        simple string extension element named <computeroutput>nodes</computeroutput> with a value
        that conforms to the <computeroutput>#PBS -l nodes=...</computeroutput> PBS job description
        directive. The <computeroutput>Globus::GRAM::ExtensionsHandler</computeroutput> module will
        make this available to the PBS adapter script by invoking <computeroutput
          >$description->{nodes}</computeroutput>. The updated PBS adapter package checks for this
        value and will create a directive in the PBS job description using this value. </para>
      <para> To use the generic construct for specifying node selection constraints, use the
          <computeroutput>resourceAllocationGroup</computeroutput> element: </para>
      <screen>
        &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
        &lt;!-- Optionally select hosts by type and number... --&gt;
        &lt;hostType&gt;...&lt;/hostType&gt;
        &lt;hostCount&gt;...&lt;/hostCount&gt;
        
        &lt;!-- *OR* by host names --&gt;
        
        &lt;hostName&gt;...&lt;/hostName&gt;
        &lt;hostName&gt;...&lt;/hostName&gt;
        . . .
        
        
        &lt;!-- With a total CPU count for this group... --&gt;
        &lt;cpuCount&gt;...&lt;/cpuCount&gt;
        
        &lt;!-- *OR* an explicit number of CPUs per node... --&gt;
        &lt;cpusPerHost&gt;...&lt;/cpusPerHost&gt;
        . . .
        
        
        &lt;!-- And a total process count for this group... --&gt;
        &lt;processCount&gt;...&lt;/processCount&gt;
        
        &lt;!-- *OR* an explicit number of processes per node... --&gt;
        &lt;processesPerHost&gt;...&lt;/processesPerHost&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;/extensions&gt;
</screen>
      <para> Extension elements specified according to the above pseudo-schema will be converted to
        an appropriate <computeroutput>nodes</computeroutput> parameter which will be treated as if
        an explicit <computeroutput>nodes</computeroutput> extension element were specified.</para>
      <para>Multiple <computeroutput>resourceAllocationGroup</computeroutput> elements may be
        specified. This will simply append the constraints to the <computeroutput
        >nodes</computeroutput> paramater with a '+' separator.</para>
      <note>
        <para>You cannot specify both <computeroutput>hostType/hostCount</computeroutput> and
            <computeroutput>hostName</computeroutput> elements. Similarly, one cannot specify both
            <computeroutput>processCount</computeroutput> and <computeroutput
          >processesPerHost</computeroutput> elements. </para>
      </note>
      <para> Here are some examples of using <computeroutput
        >resourceAllocationGroup</computeroutput>: </para>
      <screen>
        &lt;!-- #PBS -l nodes=1:ppn=10 --&gt;
        &lt;!-- 10 processes --&gt;
        &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;processCount&gt;10&lt;/processCount&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;/extensions&gt;
        
        &lt;!-- #PBS -l nodes=activemural:ppn=10+5:ia64-compute:ppn=2 --&gt;
        &lt;!-- 1 process (process default) --&gt;
        &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
        &lt;hostType&gt;activemural&lt;/hostType&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;resourceAllocationGroup&gt;
        &lt;hostType&gt;ia64-compute&lt;/hostType&gt;
        &lt;hostCount&gt;5&lt;/hostCount&gt;
        &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;/extensions&gt;
        
        &lt;!-- #PBS -l nodes=vis001:ppn=5+vis002:ppn=5+comp014:ppn=2+comp015:ppn=2 --&gt;
        &lt;!-- 15 total processes --&gt;
        &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
        &lt;hostName&gt;vis001&lt;/hostName&gt;
        &lt;hostName&gt;vis002&lt;/hostName&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;processesPerHost&gt;5&lt;/processesPerHost&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;resourceAllocationGroup&gt;
        &lt;hostName&gt;comp014&lt;/hostName&gt;
        &lt;hostName&gt;comp015&lt;/hostName&gt;
        &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
        &lt;processCount&gt;5&lt;/processCount&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;/extensions&gt;
</screen>
    </section>
  </section>
  <section id="gram5-extensions-customizing">
    <title>Customizing Extensions Support</title>
    <para>Two Perl modules must be edited to customize extensions support.</para>
    <itemizedlist>
      <listitem>
        <para>The first is <computeroutput>ExtensionsHandler.pm</computeroutput>. This is where the
          GRAM5 job description XML of the <computeroutput>extensions</computeroutput> element is
          parsed and entries are added or appended to the Perl job description hash. </para>
      </listitem>
      <listitem>
        <para>The second module that needs to be edited is the particular resource manager adapter
          module that will use any new hash entries to either alter its behavior or create
          additional parameters in the resource manager job description.</para>
      </listitem>
    </itemizedlist>
    <section id="gram5-extensions-customizing-handler">
      <title>Customizing ExtensionsHandler.pm</title>
      <para> This module logs various things to the log file specified in the <computeroutput
          >logfile</computeroutput> extension element. If you place this element at the start of the
        extensions for which you are creating support, then you can look at the specified log file
        to get some idea of what the handler is doing. You can add new logging lines by using the
          <computeroutput>$self->log()</computeroutput> function. This simply takes a string that
        gets appended to the log file with a prefix of "<computeroutput>&lt;date string&gt;
          EXTENSIONS HANDLER:</computeroutput>". </para>
      <para> There are three main subroutines that are used to handle parsing events and process
        them accordingly:</para>
      <itemizedlist>
        <listitem>
          <para><computeroutput>Char()</computeroutput></para>
        </listitem>
        <listitem>
          <para><computeroutput>StartTag()</computeroutput></para>
        </listitem>
        <listitem>
          <para>
            <computeroutput>EndTag()</computeroutput></para>
        </listitem>
      </itemizedlist>
      <para>More handlers can be specified for other specific events when creating the
          <computeroutput>XML::Parser</computeroutput> instance in <computeroutput
        >new()</computeroutput> (see the <ulink
          url="http://search.cpan.org/~coopercl/XML-Parser-2.31/Parser.pm">XML::Parser</ulink>
        documentation for details). </para>
      <para>The following list describes what the three main subroutines currently do. Modify the
        subroutines as necessary to achieve your specific goal. </para>
      <variablelist>
        <varlistentry>
          <term><computeroutput>Char()</computeroutput></term>
          <listitem>
            <para> Doesn't do anything but collect CDATA found between the current element's start
              and end tags. You can access the CDATA for the current element by using
                <computeroutput>$self->{CDATA}</computeroutput>. </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><computeroutput>StartTag()</computeroutput></term>
          <listitem>
            <para> Responsible for collecting the attributes associated with the element. It also
              increments the counter, which keeps track of the number of child elements to the
              current extension element, and pushes the current element name onto the
                <computeroutput>@scope</computeroutput> queue for later use. </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><computeroutput>EndTag()</computeroutput></term>
          <listitem>
            <para> Takes the CDATA collected by <computeroutput>Char()</computeroutput> and creates
              new Perl job description hash entries. This is most likely where you will need to do
              most of your work when adding support for new extension elements. Two useful variables
              are <computeroutput>$currentScope</computeroutput> and <computeroutput
              >$parentScope</computeroutput>. These indicate the current element that is being
              parsed and the parent of the element being parsed respectively. This is useful for
              establishing a context from which to work. The <computeroutput>@scope</computeroutput>
              queue is piped at the end of this subroutine. </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="gram5-extensions-customizing-adapter">
      <title>Customizing the Adapter Module</title>
      <para> Each adapter and each extension's purpose is different, so there aren't any
          specific instructions for modifying the resource manager/scheduler adapter module.
          It is suggested that you spend some time trying to understand what the adapter does
          and how before making your changes. </para>
      <para> Any new hash entries you created in
          <computeroutput>ExtensionsHandler.pm</computeroutput> (see the "Customizing
          ExtensionsHandler.pm" section above) can be accessed by calling
          <computeroutput>$description->entryname()</computeroutput> from the adapter
          module, where 'entryname' is the name of the entry that was added. </para>
      <para> See the <link linkend="gram5-extensions-constructs">construct documentation</link>
          above for more details on generic constructs that are already supported in
          ExtensionsHandler.pm. This is often an easier route to
          implementing your extensions than creating a custom construct. </para>
    </section>
  </section>
</chapter>
