<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="globus-async">
  <title>GT <replaceable role="entity">version</replaceable>: Asynchronous Event Handling</title>

<para>The Globus Toolkit contains several APIs written in C for creating grid applications.  Each of these components is built on a coherent asynchronous event model.  This text will introduce and explain the philosophy behind the model and its basic concepts.</para>
<section id="examples"><title>Examples</title>
<itemizedlist>
  <listitem><para><olink targetptr="globus-async-example1">Example 1</olink> - Demonstrates basic use of <computeroutput>globus_callback_register_oneshot()</computeroutput></para></listitem>
  <listitem><para><olink targetptr="globus-async-example2">Example 2</olink> - An example of <computeroutput>globus_callback_register_oneshot()</computeroutput> using condition variables</para></listitem>
  <listitem><para><olink targetptr="globus-async-example3">Example 3</olink> - Game of Craps example demonstrates a more complex use of the asynchronous event model</para></listitem>
</itemizedlist></section>

  <section id="EventModels"><title>Event Models</title>
<para>The Globus Toolkit uses an <emphasis role="strong">asynchronous event model</emphasis>.  
  Details of this model are contained in the remainder of this text but it will be helpful to take a few examples of other popular models.</para>
<para>
Applications existing in event heavy environments, such as graphical user interfaces
  (GUIs), IO, or inter-process signaling, must implement some event
model.  Events are characterized by changes in the environment at an undetermined
time. There are several different popular models used to handle such events.
We provide examples of them here, and then describe in detail the asynchronous
event model used by the Globus Toolkit.</para>

<section><title>Blocking Event Model</title>
<para>In a blocking API, an event is serviced, delaying all processing in the current
    thread of execution until the event completes. This has the obvious disadvantage
    that no processing can be done while waiting on the IO. Typically this is
    solved by forking additional processes or creating additional threads to
    service each event. However, more processes and more threads make a more
    resource intensive application.
</para>
      <para><emphasis role="strong">Example: Blocking Event Model</emphasis></para>
    <screen>
main()
{
    while(!done)
    {
        ~ other processing ~
        data = ReadData();
        ~ process event ~
    }
}
    </screen>
  </section>
<section><title>Non-blocking Event Model</title>
<para>A non-blocking model follows the same in-line procedural model as blocking
    except that events are polled for completion. Instead of blocking all processing
    until the event completes, the user asks if the event is complete. If so,
    the event is processed. If not, other processing may resume.</para>
 <para><emphasis role="strong">Example: Non-blocking Event Model</emphasis></para>
    <screen>
main()
{
    while(!done)
    {
        if(EventIsReady())
        {
            ~ process event ~
        }
        else
        {
            ~ other processing ~
        }
    }
}
    </screen>
  
<para>Unlike the blocking model, this approach allows for simultaneous processing
      while waiting for the event.  However, it can become cumbersome as more
    and more events are added. Further, if there is no other processing to
      be done, it results in tight spin loops that use the CPU simply to poll
  for events.</para></section>
  
<section><title>Asynchronous Event Model</title>
<para>The asynchronous approach does not follow the in-line procedure.  Instead
    events are given handler functions.  A user registers for an event with
    the system, giving it a handler function.  When the event occurs the system
    calls the user's handler function.
</para>

    <para><emphasis role="strong">Example: Asynchronous Event Model</emphasis>
    </para>
  <screen>
event_handler()
{
    process event
    register_next_event();
}

main()
{
    ~ other processing ~
    register_event()
    ~ other processing ~
    while(!done)
    {
        wait_for_events();
    }
}
    </screen>

<para>Like the non-blocking model, this allows simultaneous event and data processing.
    In this model, programs are designed as a series of events rather than a
    serial execution of instructions. A programmer registers events and when they occur the necessary processing is done. Additional events may then be registered and the program goes back to waiting for events. This is the approach taken by the Globus Toolkit.</para></section>
</section>
  
  <section id="CallbackLibrary"><title>Callback Library</title>
<para>The heart of the Globus event model is the callback library.  This API provides
  a user with functionality for asynchronous time events. In order to use the
  API for events, the user must implement a function (the callback) that is called
when the event has occurred and processes it. </para>
<para>There are two fundamental functions
    that explain the API: </para>

<screen>
globus_result_t
globus_callback_register_oneshot(
    globus_callback_handle_t *          callback_handle,
    const globus_reltime_t *            delay_time,
    globus_callback_func_t              callback_func,
    void *                              callback_user_args);

globus_result_t
globus_poll();
</screen>
<para>The first function is fairly clear. It registers the callback <computeroutput>callback_func</computeroutput> with the system that will be called 
  once the time specified by <computeroutput>delay_time</computeroutput> has expired.  </para>
<para>The more interesting of the two is <computeroutput>globus_poll()</computeroutput>. Semantically
  this function is used to briefly turn control over to the Globus event system
  for processing. What this means is that <computeroutput>globus_poll()</computeroutput> must be
  called often enough for the Globus event system to function. This is recognized as a rather ambiguous statement. Therefore, a look at what happens with <computeroutput>globus_poll()</computeroutput> should
  assist in explanation. In threaded builds of Globus this <computeroutput>globus_poll()</computeroutput> simply results in a call to <computeroutput>thread_yield()</computeroutput> where control can be
  switched to a background thread dedicated to event processing. In non-threaded
  builds, a list of events is maintained by the system. A call to <computeroutput>globus_poll()</computeroutput> finds
  ready events in the list and dispatches the associated callback to the user
  within the same call stack.</para>
<para>
In <olink targetptr="globus-async-example1">Example 1</olink> a use of
these two functions is displayed. The function <computeroutput>user_callback</computeroutput> is
registered for execution after 1 second has elapsed. </para>
<para>In a non-threaded build,
  there is a single thread of execution. In the main loop, the call to <computeroutput>globus_poll()</computeroutput> invokes
  the Globus event process code. The code checks internal data structures for
  any ready events. If found, the user callbacks associated with the events will
  be called in the same call stack.</para>
<para>
In a threaded build a user would see two threads (possibly more, but for the
  sake of clarity two will be used): the main thread that is executing the loop
  in <computeroutput>main()</computeroutput> and an internal Globus thread that is handling polling
  of events. The Globus thread is created when the user calls <computeroutput>globus_module_activate(GLOBUS_COMMON_MODULE)</computeroutput>.  This
  function must be called before any API function in the the <computeroutput>globus_common</computeroutput> package
  can be used. This is another common theme in Globus: all modules must be activated
  before use and deactivated when finished. The event thread polls all events
  and as they become ready the functions associated with them are dispatched.</para>
<para>
Another important concept to note in this API is the use of the <computeroutput>void * user_arg</computeroutput> parameter.  This is a simple but important part of the model.
On registration of an event, a user can pass in a void pointer and this pointer
will be threaded through to their event callback. The pointer can point to any
bit of memory the user likes. Typically it points to some structure that allows
the user to maintain state throughout a series of event callbacks. This memory
is completely managed by the user, so if the memory is used in the event callback the user needs to be careful to <emphasis role="strong">not</emphasis> free the memory until the callback occurs.
For a more complicated example of this see <olink targetptr="globus-async-example2">Example 2</olink>.</para>
  </section>
  <section id="ThreadAbstraction"><title>Thread Abstraction</title>
<para>The first thing to look at in understanding the Globus event model is the thread
abstraction layer. Globus can be built in a variety of ways with regard to the
underlying thread system. It can be built with pthreads, win32
threads, or non threaded depending on the user's preferences and the available
packages on the system. All builds present the same API. This thread API is very
much akin to pthreads. If the reader is not familiar with pthreads, we recommend
reading the  pthread manual. The more notable API interface is
presented below:</para>

<screen>
int
globus_thread_create(
    globus_thread_t *           thread,
    globus_threadattr_t *       attr,
    globus_thread_func_t        func,
    void *                      user_arg);

int
globus_mutex_lock(
    globus_mutex_t *            mutex);

int
globus_mutex_unlock(
    globus_mutex_t *            mutex);

int
globus_cond_wait(
    globus_cond_t *             cond,
    globus_mutex_t *            mutex);

int
globus_cond_signal(
    globus_cond_t *             cond);
</screen>

<para>It is important to note that this is <emphasis role="strong">not</emphasis> a complete set 
  of necessary functions to properly use the threaded API. However, for the
  purposes of this text, they will serve for an explanation.  </para>
<itemizedlist>
  <listitem><para><computeroutput>globus_thread_create()</computeroutput> will
      start a new thread of execution with a new call stack running beginning
    at the parameter <computeroutput>func</computeroutput>. </para>
  </listitem>
  <listitem><para><computeroutput>globus_mutex_lock()</computeroutput> and <computeroutput>globus_mutex_unlock()</computeroutput> provide
          mutual exclusive among threads over critical sections of code.</para>
  </listitem>
  <listitem><para><computeroutput>globus_cond_wait()</computeroutput> and <computeroutput>globus_cond_signal()</computeroutput> provide
            a means of thread synchronization. </para>
  </listitem>
  <listitem><para><computeroutput>wait()</computeroutput> will delay the
              thread that calls it until some other thread calls <computeroutput>signal()</computeroutput>.</para></listitem>
</itemizedlist>
<para>
In most cases the thread layer abstraction is a very thin pass through to the
underlying thread package. </para>
<para>The notable exception is the non-threaded build.
    The Globus Toolkit has created a non-threaded, semantically equivalent implementation
    of all the functions described above (and of most in the pthreads API) with
  the exception of <computeroutput>globus_thread_create()</computeroutput>.  In the non-threaded
  case this is a no-op. However the model of asynchronous programming used in
  the Globus Toolkit, <computeroutput>globus_thread_create()</computeroutput> is rarely needed or
  used.</para>
<para>
In the Globus model, the callback code and the thread abstraction are coupled.  <olink targetptr="globus-async-example2">Example
2</olink> shows how this coupling works:</para>
<orderedlist>
  <listitem><para>An event is registered in the main
    thread, then <computeroutput>globus_cond_wait()</computeroutput> is called. </para>
  </listitem>
  <listitem><para>When the event has
    been processed, the handler is called.</para> 
  </listitem>
  <listitem><para>The handler signals the wait that
    it may continue, then exits.</para>
  </listitem>
  <listitem><para>The signal awakens the wait so the main thread
    may continue. </para>
  </listitem>
  <listitem><para>The main thread then exits. </para></listitem>
</orderedlist>
<para>
In the threaded build, <computeroutput>globus_cond_wait()</computeroutput> and <computeroutput>globus_cond_signal()</computeroutput> are
simple passes through to the underlying thread packages, and as described previously,
a background thread delivers the event. </para>
<para>In the non-threaded build, <computeroutput>globus_cond_wait()</computeroutput> will
  call <computeroutput>globus_poll()</computeroutput> and the non-threaded polling code takes over.
  For this reason, it is often not necessary to call <computeroutput>globus_poll()</computeroutput> in
  non-threaded builds. <computeroutput>globus_cond_wait()</computeroutput> tends to be used often
  enough to satisfy the needs of the event system.</para>
  </section>
  <section id="AsynchronousModel">
<title>Asynchronous Model</title>

<para>In many ways, the asynchronous programming model is the most difficult of the
three presented. The blocking model is clearly the easiest, because everything
happens in-line, and when the event function (like a read or a write) returns,
the event has completed and all data is available. Events in this model are treated
just like any other function call and are therefore easily dealt with by programmers
with modest logic skills.</para>
<para>
The non-blocking model is a bit more complicated than blocking, but not much.
  The only twist is that a user must check to see if the event completed and,
  if so, how much of it completed. This still allows for in-line processing;
  it only requires an additional <computeroutput>if</computeroutput> statement. Even when event polling is multiplexed
  (for example, posix select) the processing is still inline. The user must
  add some branches to determine what event is ready and then process it. The
  most difficult challenge of the non-blocking model is making use of the idle
  time when no events are ready.</para>
<para>
In both  non-blocking and blocking, the user has easy, in-line control over 
  when an event is processed. If there is any logic that must occur before the
  event, the user simply needs to complete that processing before calling either
  the blocking function or the non-blocking function which checks for ready events.
  The asynchronous model removes this luxury. In the asynchronous model events
  can occur at any time. This can complicate the logic of keeping critical sections
  of code safe. Further complication is caused by the fact that they come
  in via their own handlers. This removes the luxury of maintaining state on
  the local stack. Instead all state must be packed into heap allocated structures
  which are passed to the callbacks via void * pointers (see the monitor structure
  in <olink targetptr="globus-async-example2">Example 2</olink>).</para>
<para>
The upside to the asynchronous model is that it forces cleaner, more well thought
  out code. The non-blocking model does not scale well. As more events are managed,
  the event processing code becomes unmanageable, typically resulting in a
  single function that is far too long and far too interdependent for practical
  maintenance. Since users can use local variables, the tendency is to use many
  different flags to control state instead of a clean, well thought out state
  machine. This is especially true with software that evolves over time, growing
  in complexity.</para>
<para>
In contrast the asynchronous model scales very well.  Every event has a clean
  separation of being scoped to a user handler function. All shared states among
  events must be encapsulated into a data structure. A side effect of these two
  characteristics is that it is easier for a user to define and follow a state
  machine then it is to create spaghetti logic based on many flags.</para>
<para>
<ulink url="globus-async-example3.html">Example 3</ulink> shows a proper
use of the asynchronous model. This example simulates the game of Craps. Craps
is a dice game, the rules of which can be found with a simple web search, but
  the following state diagram should explain the rules well enough for this example.</para>
    <figure>
      <title>State Diagram</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="state_diagram.png" format="PNG"
            align="center"/>
        </imageobject>
        <textobject>
          <phrase>State Diagram</phrase>
        </textobject>
      </mediaobject>
    </figure>
<para>
<olink targetptr="globus-async-example3">Example 3</olink> follows this
state diagram. In the example rolls of the dice are considered events. For the
sake of simplicity the example only uses a one shot event and then gets the data
by calling <computeroutput>random();</computeroutput>  If this were a real world event, the values
for the dice would come in as part of the event function. Notice how each time
the event occurs the state is checked and, if needed, advanced to the next state.
In the main function the program waits until the state machine comes to the final stage, where it signals the wait and allows for the program to end.</para>

<section><title>Blocking in Callbacks</title>
<para>What happens if an event handler blocks?  The correct answer to this question
    is: <emphasis role="strong">They never should</emphasis>.  This answer is of course a bit naive.  There
    will be times when blocking in a callback is the only solution, and there
    will be even more times when it is the chosen solution, albeit the wrong
    one. Therefore, the Globus Toolkit does have mechanisms to allow this. That
    said, a user should make every effort to find alternative solutions to blocking
    in event callbacks. If the only solution is to block in a callback it could
    be an indication that the state machine is erroneous.
</para>
<para>
  If an event callback is going to block, it must call the following function:
  <computeroutput>void globus_thread_blocking_will_block();</computeroutput>
  If <computeroutput>globus_cond_wait()</computeroutput> is called, this function is implied.
</para>
<para>
  In the threaded build of Globus there is a background thread that handles
    the polling of events and dispatching of the handler functions. When a
    handler function blocks, it prevents this process.  <computeroutput>globus_thread_blocking_will_block()</computeroutput> starts
      a new thread to handle event processing and allows the user to take over
      the current thread without stopping the processing of other threads. The
      user must also call <computeroutput>globus_poll()</computeroutput> in order to ensure that
event processing continues. </para>
<para>This is needed:</para>
<itemizedlist>
  <listitem> <para>in the threaded case to yield
                the user's processing thread to the system event thread.</para>
  </listitem>
  <listitem><para> in the non
                  threaded case so that the only thread can make a non-blocking
    run through of any ready events.</para> </listitem>
</itemizedlist>
  </section>
  </section>
  <section id="Conclusion"> 
  <title>Conclusion</title>

<para>The Globus Toolkit is middleware for the grid.  Because grid infrastructure often
depends heavily on both push and pull notifications (remote events), the callback
style event handling model the Globus Toolkit provides is essential. It allows
entire APIs within the toolkit to be designed with asynchronous functions that
use the event handling model. Once an API provides that asynchronous functionality
(such as XIO), software that builds on top of it can leverage this functionality.
This eases the burden of the application programmer, as they need only to implement
a callback function to handle possibly many notification events efficiently,
instead of stopping execution until one is received, or managing multiple threads.  </para>
<para>
In the Globus Toolkit, because of the thread abstraction it provides, threads
  are managed by the underlying code base, so that the developer can be ignorant of using threads but still be able to get their benefits, simply
  by specifying a compile time switch. Overall, this flexibility is quite powerful,
  which is why we encourage the use of this model when designing and developing
  your own software components using the Globus Toolkit.</para>

  </section>
  <section id="References"><title>References</title>
<itemizedlist>
  <listitem><para><ulink url="http://www.opengroup.org/onlinepubs/007908799/xsh/pthread.h.html">Posix Threads API</ulink></para>
  </listitem>
  <listitem><para><ulink url="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/i_o_completion_ports.asp">Microsoft's description of Completion Ports and Thread Pooling</ulink></para>
  </listitem>
  <listitem><para><ulink url="http://www-unix.globus.org/api/c-globus-${version}/globus_common/html/index.html">Globus Common API</ulink></para>
  </listitem>
  <listitem><para><ulink url="http://www.cs.bgu.ac.il/~elhadad/se/events.html">Documentation on Programming with Events</ulink></para>
</listitem>
</itemizedlist></section>
</chapter>
